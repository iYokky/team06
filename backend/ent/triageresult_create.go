// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/department"
	"github.com/team06/app/ent/nurse"
	"github.com/team06/app/ent/patient"
	"github.com/team06/app/ent/triageresult"
	"github.com/team06/app/ent/urgencylevel"
)

// TriageResultCreate is the builder for creating a TriageResult entity.
type TriageResultCreate struct {
	config
	mutation *TriageResultMutation
	hooks    []Hook
}

// SetSymptom sets the "symptom" field.
func (trc *TriageResultCreate) SetSymptom(s string) *TriageResultCreate {
	trc.mutation.SetSymptom(s)
	return trc
}

// SetTriageDate sets the "triageDate" field.
func (trc *TriageResultCreate) SetTriageDate(t time.Time) *TriageResultCreate {
	trc.mutation.SetTriageDate(t)
	return trc
}

// SetNillableTriageDate sets the "triageDate" field if the given value is not nil.
func (trc *TriageResultCreate) SetNillableTriageDate(t *time.Time) *TriageResultCreate {
	if t != nil {
		trc.SetTriageDate(*t)
	}
	return trc
}

// SetTriageResultToUrgencyLevelID sets the "triageResultToUrgencyLevel" edge to the UrgencyLevel entity by ID.
func (trc *TriageResultCreate) SetTriageResultToUrgencyLevelID(id int) *TriageResultCreate {
	trc.mutation.SetTriageResultToUrgencyLevelID(id)
	return trc
}

// SetNillableTriageResultToUrgencyLevelID sets the "triageResultToUrgencyLevel" edge to the UrgencyLevel entity by ID if the given value is not nil.
func (trc *TriageResultCreate) SetNillableTriageResultToUrgencyLevelID(id *int) *TriageResultCreate {
	if id != nil {
		trc = trc.SetTriageResultToUrgencyLevelID(*id)
	}
	return trc
}

// SetTriageResultToUrgencyLevel sets the "triageResultToUrgencyLevel" edge to the UrgencyLevel entity.
func (trc *TriageResultCreate) SetTriageResultToUrgencyLevel(u *UrgencyLevel) *TriageResultCreate {
	return trc.SetTriageResultToUrgencyLevelID(u.ID)
}

// SetTriageResultToDepartmentID sets the "triageResultToDepartment" edge to the Department entity by ID.
func (trc *TriageResultCreate) SetTriageResultToDepartmentID(id int) *TriageResultCreate {
	trc.mutation.SetTriageResultToDepartmentID(id)
	return trc
}

// SetNillableTriageResultToDepartmentID sets the "triageResultToDepartment" edge to the Department entity by ID if the given value is not nil.
func (trc *TriageResultCreate) SetNillableTriageResultToDepartmentID(id *int) *TriageResultCreate {
	if id != nil {
		trc = trc.SetTriageResultToDepartmentID(*id)
	}
	return trc
}

// SetTriageResultToDepartment sets the "triageResultToDepartment" edge to the Department entity.
func (trc *TriageResultCreate) SetTriageResultToDepartment(d *Department) *TriageResultCreate {
	return trc.SetTriageResultToDepartmentID(d.ID)
}

// SetTriageResultToNurseID sets the "triageResultToNurse" edge to the Nurse entity by ID.
func (trc *TriageResultCreate) SetTriageResultToNurseID(id int) *TriageResultCreate {
	trc.mutation.SetTriageResultToNurseID(id)
	return trc
}

// SetNillableTriageResultToNurseID sets the "triageResultToNurse" edge to the Nurse entity by ID if the given value is not nil.
func (trc *TriageResultCreate) SetNillableTriageResultToNurseID(id *int) *TriageResultCreate {
	if id != nil {
		trc = trc.SetTriageResultToNurseID(*id)
	}
	return trc
}

// SetTriageResultToNurse sets the "triageResultToNurse" edge to the Nurse entity.
func (trc *TriageResultCreate) SetTriageResultToNurse(n *Nurse) *TriageResultCreate {
	return trc.SetTriageResultToNurseID(n.ID)
}

// SetTriageResultToPatientID sets the "triageResultToPatient" edge to the Patient entity by ID.
func (trc *TriageResultCreate) SetTriageResultToPatientID(id int) *TriageResultCreate {
	trc.mutation.SetTriageResultToPatientID(id)
	return trc
}

// SetNillableTriageResultToPatientID sets the "triageResultToPatient" edge to the Patient entity by ID if the given value is not nil.
func (trc *TriageResultCreate) SetNillableTriageResultToPatientID(id *int) *TriageResultCreate {
	if id != nil {
		trc = trc.SetTriageResultToPatientID(*id)
	}
	return trc
}

// SetTriageResultToPatient sets the "triageResultToPatient" edge to the Patient entity.
func (trc *TriageResultCreate) SetTriageResultToPatient(p *Patient) *TriageResultCreate {
	return trc.SetTriageResultToPatientID(p.ID)
}

// Mutation returns the TriageResultMutation object of the builder.
func (trc *TriageResultCreate) Mutation() *TriageResultMutation {
	return trc.mutation
}

// Save creates the TriageResult in the database.
func (trc *TriageResultCreate) Save(ctx context.Context) (*TriageResult, error) {
	var (
		err  error
		node *TriageResult
	)
	trc.defaults()
	if len(trc.hooks) == 0 {
		if err = trc.check(); err != nil {
			return nil, err
		}
		node, err = trc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TriageResultMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = trc.check(); err != nil {
				return nil, err
			}
			trc.mutation = mutation
			node, err = trc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(trc.hooks) - 1; i >= 0; i-- {
			mut = trc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, trc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (trc *TriageResultCreate) SaveX(ctx context.Context) *TriageResult {
	v, err := trc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (trc *TriageResultCreate) defaults() {
	if _, ok := trc.mutation.TriageDate(); !ok {
		v := triageresult.DefaultTriageDate()
		trc.mutation.SetTriageDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (trc *TriageResultCreate) check() error {
	if _, ok := trc.mutation.Symptom(); !ok {
		return &ValidationError{Name: "symptom", err: errors.New("ent: missing required field \"symptom\"")}
	}
	if v, ok := trc.mutation.Symptom(); ok {
		if err := triageresult.SymptomValidator(v); err != nil {
			return &ValidationError{Name: "symptom", err: fmt.Errorf("ent: validator failed for field \"symptom\": %w", err)}
		}
	}
	if _, ok := trc.mutation.TriageDate(); !ok {
		return &ValidationError{Name: "triageDate", err: errors.New("ent: missing required field \"triageDate\"")}
	}
	return nil
}

func (trc *TriageResultCreate) sqlSave(ctx context.Context) (*TriageResult, error) {
	_node, _spec := trc.createSpec()
	if err := sqlgraph.CreateNode(ctx, trc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (trc *TriageResultCreate) createSpec() (*TriageResult, *sqlgraph.CreateSpec) {
	var (
		_node = &TriageResult{config: trc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: triageresult.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: triageresult.FieldID,
			},
		}
	)
	if value, ok := trc.mutation.Symptom(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: triageresult.FieldSymptom,
		})
		_node.Symptom = value
	}
	if value, ok := trc.mutation.TriageDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: triageresult.FieldTriageDate,
		})
		_node.TriageDate = value
	}
	if nodes := trc.mutation.TriageResultToUrgencyLevelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   triageresult.TriageResultToUrgencyLevelTable,
			Columns: []string{triageresult.TriageResultToUrgencyLevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: urgencylevel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := trc.mutation.TriageResultToDepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   triageresult.TriageResultToDepartmentTable,
			Columns: []string{triageresult.TriageResultToDepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := trc.mutation.TriageResultToNurseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   triageresult.TriageResultToNurseTable,
			Columns: []string{triageresult.TriageResultToNurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := trc.mutation.TriageResultToPatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   triageresult.TriageResultToPatientTable,
			Columns: []string{triageresult.TriageResultToPatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TriageResultCreateBulk is the builder for creating many TriageResult entities in bulk.
type TriageResultCreateBulk struct {
	config
	builders []*TriageResultCreate
}

// Save creates the TriageResult entities in the database.
func (trcb *TriageResultCreateBulk) Save(ctx context.Context) ([]*TriageResult, error) {
	specs := make([]*sqlgraph.CreateSpec, len(trcb.builders))
	nodes := make([]*TriageResult, len(trcb.builders))
	mutators := make([]Mutator, len(trcb.builders))
	for i := range trcb.builders {
		func(i int, root context.Context) {
			builder := trcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TriageResultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, trcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, trcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, trcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (trcb *TriageResultCreateBulk) SaveX(ctx context.Context) []*TriageResult {
	v, err := trcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

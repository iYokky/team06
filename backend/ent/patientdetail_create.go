// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/bloodtype"
	"github.com/team06/app/ent/gender"
	"github.com/team06/app/ent/patient"
	"github.com/team06/app/ent/patientdetail"
	"github.com/team06/app/ent/prefix"
)

// PatientDetailCreate is the builder for creating a PatientDetail entity.
type PatientDetailCreate struct {
	config
	mutation *PatientDetailMutation
	hooks    []Hook
}

// SetPrefixID sets the "prefix" edge to the Prefix entity by ID.
func (pdc *PatientDetailCreate) SetPrefixID(id int) *PatientDetailCreate {
	pdc.mutation.SetPrefixID(id)
	return pdc
}

// SetNillablePrefixID sets the "prefix" edge to the Prefix entity by ID if the given value is not nil.
func (pdc *PatientDetailCreate) SetNillablePrefixID(id *int) *PatientDetailCreate {
	if id != nil {
		pdc = pdc.SetPrefixID(*id)
	}
	return pdc
}

// SetPrefix sets the "prefix" edge to the Prefix entity.
func (pdc *PatientDetailCreate) SetPrefix(p *Prefix) *PatientDetailCreate {
	return pdc.SetPrefixID(p.ID)
}

// SetGenderID sets the "gender" edge to the Gender entity by ID.
func (pdc *PatientDetailCreate) SetGenderID(id int) *PatientDetailCreate {
	pdc.mutation.SetGenderID(id)
	return pdc
}

// SetNillableGenderID sets the "gender" edge to the Gender entity by ID if the given value is not nil.
func (pdc *PatientDetailCreate) SetNillableGenderID(id *int) *PatientDetailCreate {
	if id != nil {
		pdc = pdc.SetGenderID(*id)
	}
	return pdc
}

// SetGender sets the "gender" edge to the Gender entity.
func (pdc *PatientDetailCreate) SetGender(g *Gender) *PatientDetailCreate {
	return pdc.SetGenderID(g.ID)
}

// SetBloodtypeID sets the "bloodtype" edge to the BloodType entity by ID.
func (pdc *PatientDetailCreate) SetBloodtypeID(id int) *PatientDetailCreate {
	pdc.mutation.SetBloodtypeID(id)
	return pdc
}

// SetNillableBloodtypeID sets the "bloodtype" edge to the BloodType entity by ID if the given value is not nil.
func (pdc *PatientDetailCreate) SetNillableBloodtypeID(id *int) *PatientDetailCreate {
	if id != nil {
		pdc = pdc.SetBloodtypeID(*id)
	}
	return pdc
}

// SetBloodtype sets the "bloodtype" edge to the BloodType entity.
func (pdc *PatientDetailCreate) SetBloodtype(b *BloodType) *PatientDetailCreate {
	return pdc.SetBloodtypeID(b.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (pdc *PatientDetailCreate) SetPatientID(id int) *PatientDetailCreate {
	pdc.mutation.SetPatientID(id)
	return pdc
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (pdc *PatientDetailCreate) SetNillablePatientID(id *int) *PatientDetailCreate {
	if id != nil {
		pdc = pdc.SetPatientID(*id)
	}
	return pdc
}

// SetPatient sets the "patient" edge to the Patient entity.
func (pdc *PatientDetailCreate) SetPatient(p *Patient) *PatientDetailCreate {
	return pdc.SetPatientID(p.ID)
}

// Mutation returns the PatientDetailMutation object of the builder.
func (pdc *PatientDetailCreate) Mutation() *PatientDetailMutation {
	return pdc.mutation
}

// Save creates the PatientDetail in the database.
func (pdc *PatientDetailCreate) Save(ctx context.Context) (*PatientDetail, error) {
	var (
		err  error
		node *PatientDetail
	)
	if len(pdc.hooks) == 0 {
		if err = pdc.check(); err != nil {
			return nil, err
		}
		node, err = pdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pdc.check(); err != nil {
				return nil, err
			}
			pdc.mutation = mutation
			node, err = pdc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pdc.hooks) - 1; i >= 0; i-- {
			mut = pdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pdc *PatientDetailCreate) SaveX(ctx context.Context) *PatientDetail {
	v, err := pdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (pdc *PatientDetailCreate) check() error {
	return nil
}

func (pdc *PatientDetailCreate) sqlSave(ctx context.Context) (*PatientDetail, error) {
	_node, _spec := pdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pdc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pdc *PatientDetailCreate) createSpec() (*PatientDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &PatientDetail{config: pdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: patientdetail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patientdetail.FieldID,
			},
		}
	)
	if nodes := pdc.mutation.PrefixIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.PrefixTable,
			Columns: []string{patientdetail.PrefixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prefix.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pdc.mutation.GenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.GenderTable,
			Columns: []string{patientdetail.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pdc.mutation.BloodtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.BloodtypeTable,
			Columns: []string{patientdetail.BloodtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bloodtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pdc.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.PatientTable,
			Columns: []string{patientdetail.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PatientDetailCreateBulk is the builder for creating many PatientDetail entities in bulk.
type PatientDetailCreateBulk struct {
	config
	builders []*PatientDetailCreate
}

// Save creates the PatientDetail entities in the database.
func (pdcb *PatientDetailCreateBulk) Save(ctx context.Context) ([]*PatientDetail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pdcb.builders))
	nodes := make([]*PatientDetail, len(pdcb.builders))
	mutators := make([]Mutator, len(pdcb.builders))
	for i := range pdcb.builders {
		func(i int, root context.Context) {
			builder := pdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PatientDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pdcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pdcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pdcb *PatientDetailCreateBulk) SaveX(ctx context.Context) []*PatientDetail {
	v, err := pdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

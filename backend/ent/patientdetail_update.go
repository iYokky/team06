// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/bloodtype"
	"github.com/team06/app/ent/gender"
	"github.com/team06/app/ent/patient"
	"github.com/team06/app/ent/patientdetail"
	"github.com/team06/app/ent/predicate"
	"github.com/team06/app/ent/prefix"
)

// PatientDetailUpdate is the builder for updating PatientDetail entities.
type PatientDetailUpdate struct {
	config
	hooks    []Hook
	mutation *PatientDetailMutation
}

// Where adds a new predicate for the PatientDetailUpdate builder.
func (pdu *PatientDetailUpdate) Where(ps ...predicate.PatientDetail) *PatientDetailUpdate {
	pdu.mutation.predicates = append(pdu.mutation.predicates, ps...)
	return pdu
}

// SetPrefixID sets the "prefix" edge to the Prefix entity by ID.
func (pdu *PatientDetailUpdate) SetPrefixID(id int) *PatientDetailUpdate {
	pdu.mutation.SetPrefixID(id)
	return pdu
}

// SetNillablePrefixID sets the "prefix" edge to the Prefix entity by ID if the given value is not nil.
func (pdu *PatientDetailUpdate) SetNillablePrefixID(id *int) *PatientDetailUpdate {
	if id != nil {
		pdu = pdu.SetPrefixID(*id)
	}
	return pdu
}

// SetPrefix sets the "prefix" edge to the Prefix entity.
func (pdu *PatientDetailUpdate) SetPrefix(p *Prefix) *PatientDetailUpdate {
	return pdu.SetPrefixID(p.ID)
}

// SetGenderID sets the "gender" edge to the Gender entity by ID.
func (pdu *PatientDetailUpdate) SetGenderID(id int) *PatientDetailUpdate {
	pdu.mutation.SetGenderID(id)
	return pdu
}

// SetNillableGenderID sets the "gender" edge to the Gender entity by ID if the given value is not nil.
func (pdu *PatientDetailUpdate) SetNillableGenderID(id *int) *PatientDetailUpdate {
	if id != nil {
		pdu = pdu.SetGenderID(*id)
	}
	return pdu
}

// SetGender sets the "gender" edge to the Gender entity.
func (pdu *PatientDetailUpdate) SetGender(g *Gender) *PatientDetailUpdate {
	return pdu.SetGenderID(g.ID)
}

// SetBloodtypeID sets the "bloodtype" edge to the BloodType entity by ID.
func (pdu *PatientDetailUpdate) SetBloodtypeID(id int) *PatientDetailUpdate {
	pdu.mutation.SetBloodtypeID(id)
	return pdu
}

// SetNillableBloodtypeID sets the "bloodtype" edge to the BloodType entity by ID if the given value is not nil.
func (pdu *PatientDetailUpdate) SetNillableBloodtypeID(id *int) *PatientDetailUpdate {
	if id != nil {
		pdu = pdu.SetBloodtypeID(*id)
	}
	return pdu
}

// SetBloodtype sets the "bloodtype" edge to the BloodType entity.
func (pdu *PatientDetailUpdate) SetBloodtype(b *BloodType) *PatientDetailUpdate {
	return pdu.SetBloodtypeID(b.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (pdu *PatientDetailUpdate) SetPatientID(id int) *PatientDetailUpdate {
	pdu.mutation.SetPatientID(id)
	return pdu
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (pdu *PatientDetailUpdate) SetNillablePatientID(id *int) *PatientDetailUpdate {
	if id != nil {
		pdu = pdu.SetPatientID(*id)
	}
	return pdu
}

// SetPatient sets the "patient" edge to the Patient entity.
func (pdu *PatientDetailUpdate) SetPatient(p *Patient) *PatientDetailUpdate {
	return pdu.SetPatientID(p.ID)
}

// Mutation returns the PatientDetailMutation object of the builder.
func (pdu *PatientDetailUpdate) Mutation() *PatientDetailMutation {
	return pdu.mutation
}

// ClearPrefix clears the "prefix" edge to the Prefix entity.
func (pdu *PatientDetailUpdate) ClearPrefix() *PatientDetailUpdate {
	pdu.mutation.ClearPrefix()
	return pdu
}

// ClearGender clears the "gender" edge to the Gender entity.
func (pdu *PatientDetailUpdate) ClearGender() *PatientDetailUpdate {
	pdu.mutation.ClearGender()
	return pdu
}

// ClearBloodtype clears the "bloodtype" edge to the BloodType entity.
func (pdu *PatientDetailUpdate) ClearBloodtype() *PatientDetailUpdate {
	pdu.mutation.ClearBloodtype()
	return pdu
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (pdu *PatientDetailUpdate) ClearPatient() *PatientDetailUpdate {
	pdu.mutation.ClearPatient()
	return pdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdu *PatientDetailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pdu.hooks) == 0 {
		affected, err = pdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pdu.mutation = mutation
			affected, err = pdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pdu.hooks) - 1; i >= 0; i-- {
			mut = pdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pdu *PatientDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := pdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdu *PatientDetailUpdate) Exec(ctx context.Context) error {
	_, err := pdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdu *PatientDetailUpdate) ExecX(ctx context.Context) {
	if err := pdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pdu *PatientDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   patientdetail.Table,
			Columns: patientdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patientdetail.FieldID,
			},
		},
	}
	if ps := pdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pdu.mutation.PrefixCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.PrefixTable,
			Columns: []string{patientdetail.PrefixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prefix.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.PrefixIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.PrefixTable,
			Columns: []string{patientdetail.PrefixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prefix.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pdu.mutation.GenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.GenderTable,
			Columns: []string{patientdetail.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.GenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.GenderTable,
			Columns: []string{patientdetail.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pdu.mutation.BloodtypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.BloodtypeTable,
			Columns: []string{patientdetail.BloodtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bloodtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.BloodtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.BloodtypeTable,
			Columns: []string{patientdetail.BloodtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bloodtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pdu.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.PatientTable,
			Columns: []string{patientdetail.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.PatientTable,
			Columns: []string{patientdetail.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patientdetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PatientDetailUpdateOne is the builder for updating a single PatientDetail entity.
type PatientDetailUpdateOne struct {
	config
	hooks    []Hook
	mutation *PatientDetailMutation
}

// SetPrefixID sets the "prefix" edge to the Prefix entity by ID.
func (pduo *PatientDetailUpdateOne) SetPrefixID(id int) *PatientDetailUpdateOne {
	pduo.mutation.SetPrefixID(id)
	return pduo
}

// SetNillablePrefixID sets the "prefix" edge to the Prefix entity by ID if the given value is not nil.
func (pduo *PatientDetailUpdateOne) SetNillablePrefixID(id *int) *PatientDetailUpdateOne {
	if id != nil {
		pduo = pduo.SetPrefixID(*id)
	}
	return pduo
}

// SetPrefix sets the "prefix" edge to the Prefix entity.
func (pduo *PatientDetailUpdateOne) SetPrefix(p *Prefix) *PatientDetailUpdateOne {
	return pduo.SetPrefixID(p.ID)
}

// SetGenderID sets the "gender" edge to the Gender entity by ID.
func (pduo *PatientDetailUpdateOne) SetGenderID(id int) *PatientDetailUpdateOne {
	pduo.mutation.SetGenderID(id)
	return pduo
}

// SetNillableGenderID sets the "gender" edge to the Gender entity by ID if the given value is not nil.
func (pduo *PatientDetailUpdateOne) SetNillableGenderID(id *int) *PatientDetailUpdateOne {
	if id != nil {
		pduo = pduo.SetGenderID(*id)
	}
	return pduo
}

// SetGender sets the "gender" edge to the Gender entity.
func (pduo *PatientDetailUpdateOne) SetGender(g *Gender) *PatientDetailUpdateOne {
	return pduo.SetGenderID(g.ID)
}

// SetBloodtypeID sets the "bloodtype" edge to the BloodType entity by ID.
func (pduo *PatientDetailUpdateOne) SetBloodtypeID(id int) *PatientDetailUpdateOne {
	pduo.mutation.SetBloodtypeID(id)
	return pduo
}

// SetNillableBloodtypeID sets the "bloodtype" edge to the BloodType entity by ID if the given value is not nil.
func (pduo *PatientDetailUpdateOne) SetNillableBloodtypeID(id *int) *PatientDetailUpdateOne {
	if id != nil {
		pduo = pduo.SetBloodtypeID(*id)
	}
	return pduo
}

// SetBloodtype sets the "bloodtype" edge to the BloodType entity.
func (pduo *PatientDetailUpdateOne) SetBloodtype(b *BloodType) *PatientDetailUpdateOne {
	return pduo.SetBloodtypeID(b.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (pduo *PatientDetailUpdateOne) SetPatientID(id int) *PatientDetailUpdateOne {
	pduo.mutation.SetPatientID(id)
	return pduo
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (pduo *PatientDetailUpdateOne) SetNillablePatientID(id *int) *PatientDetailUpdateOne {
	if id != nil {
		pduo = pduo.SetPatientID(*id)
	}
	return pduo
}

// SetPatient sets the "patient" edge to the Patient entity.
func (pduo *PatientDetailUpdateOne) SetPatient(p *Patient) *PatientDetailUpdateOne {
	return pduo.SetPatientID(p.ID)
}

// Mutation returns the PatientDetailMutation object of the builder.
func (pduo *PatientDetailUpdateOne) Mutation() *PatientDetailMutation {
	return pduo.mutation
}

// ClearPrefix clears the "prefix" edge to the Prefix entity.
func (pduo *PatientDetailUpdateOne) ClearPrefix() *PatientDetailUpdateOne {
	pduo.mutation.ClearPrefix()
	return pduo
}

// ClearGender clears the "gender" edge to the Gender entity.
func (pduo *PatientDetailUpdateOne) ClearGender() *PatientDetailUpdateOne {
	pduo.mutation.ClearGender()
	return pduo
}

// ClearBloodtype clears the "bloodtype" edge to the BloodType entity.
func (pduo *PatientDetailUpdateOne) ClearBloodtype() *PatientDetailUpdateOne {
	pduo.mutation.ClearBloodtype()
	return pduo
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (pduo *PatientDetailUpdateOne) ClearPatient() *PatientDetailUpdateOne {
	pduo.mutation.ClearPatient()
	return pduo
}

// Save executes the query and returns the updated PatientDetail entity.
func (pduo *PatientDetailUpdateOne) Save(ctx context.Context) (*PatientDetail, error) {
	var (
		err  error
		node *PatientDetail
	)
	if len(pduo.hooks) == 0 {
		node, err = pduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pduo.mutation = mutation
			node, err = pduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pduo.hooks) - 1; i >= 0; i-- {
			mut = pduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pduo *PatientDetailUpdateOne) SaveX(ctx context.Context) *PatientDetail {
	node, err := pduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pduo *PatientDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := pduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pduo *PatientDetailUpdateOne) ExecX(ctx context.Context) {
	if err := pduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pduo *PatientDetailUpdateOne) sqlSave(ctx context.Context) (_node *PatientDetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   patientdetail.Table,
			Columns: patientdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patientdetail.FieldID,
			},
		},
	}
	id, ok := pduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PatientDetail.ID for update")}
	}
	_spec.Node.ID.Value = id
	if pduo.mutation.PrefixCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.PrefixTable,
			Columns: []string{patientdetail.PrefixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prefix.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.PrefixIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.PrefixTable,
			Columns: []string{patientdetail.PrefixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prefix.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pduo.mutation.GenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.GenderTable,
			Columns: []string{patientdetail.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.GenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.GenderTable,
			Columns: []string{patientdetail.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pduo.mutation.BloodtypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.BloodtypeTable,
			Columns: []string{patientdetail.BloodtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bloodtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.BloodtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.BloodtypeTable,
			Columns: []string{patientdetail.BloodtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bloodtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pduo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.PatientTable,
			Columns: []string{patientdetail.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientdetail.PatientTable,
			Columns: []string{patientdetail.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PatientDetail{config: pduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patientdetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

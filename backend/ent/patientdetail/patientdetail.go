// Code generated by entc, DO NOT EDIT.

package patientdetail

const (
	// Label holds the string label denoting the patientdetail type in the database.
	Label = "patient_detail"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"

	// EdgePrefix holds the string denoting the prefix edge name in mutations.
	EdgePrefix = "prefix"
	// EdgeGender holds the string denoting the gender edge name in mutations.
	EdgeGender = "gender"
	// EdgeBloodtype holds the string denoting the bloodtype edge name in mutations.
	EdgeBloodtype = "bloodtype"
	// EdgePatient holds the string denoting the patient edge name in mutations.
	EdgePatient = "patient"

	// Table holds the table name of the patientdetail in the database.
	Table = "patient_details"
	// PrefixTable is the table the holds the prefix relation/edge.
	PrefixTable = "patient_details"
	// PrefixInverseTable is the table name for the Prefix entity.
	// It exists in this package in order to avoid circular dependency with the "prefix" package.
	PrefixInverseTable = "prefixes"
	// PrefixColumn is the table column denoting the prefix relation/edge.
	PrefixColumn = "prefix_patient_details"
	// GenderTable is the table the holds the gender relation/edge.
	GenderTable = "patient_details"
	// GenderInverseTable is the table name for the Gender entity.
	// It exists in this package in order to avoid circular dependency with the "gender" package.
	GenderInverseTable = "genders"
	// GenderColumn is the table column denoting the gender relation/edge.
	GenderColumn = "gender_patient_details"
	// BloodtypeTable is the table the holds the bloodtype relation/edge.
	BloodtypeTable = "patient_details"
	// BloodtypeInverseTable is the table name for the BloodType entity.
	// It exists in this package in order to avoid circular dependency with the "bloodtype" package.
	BloodtypeInverseTable = "blood_types"
	// BloodtypeColumn is the table column denoting the bloodtype relation/edge.
	BloodtypeColumn = "blood_type_patient_details"
	// PatientTable is the table the holds the patient relation/edge.
	PatientTable = "patient_details"
	// PatientInverseTable is the table name for the Patient entity.
	// It exists in this package in order to avoid circular dependency with the "patient" package.
	PatientInverseTable = "patients"
	// PatientColumn is the table column denoting the patient relation/edge.
	PatientColumn = "patient_patient_details"
)

// Columns holds all SQL columns for patientdetail fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the PatientDetail type.
var ForeignKeys = []string{
	"blood_type_patient_details",
	"gender_patient_details",
	"patient_patient_details",
	"prefix_patient_details",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

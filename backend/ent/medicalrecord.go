// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/team06/app/ent/medicalrecord"
)

// MedicalRecord is the model entity for the MedicalRecord schema.
type MedicalRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MedicalRecord) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case medicalrecord.FieldID:
			values[i] = &sql.NullInt64{}
		case medicalrecord.FieldEmail, medicalrecord.FieldPassword, medicalrecord.FieldName:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type MedicalRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MedicalRecord fields.
func (mr *MedicalRecord) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case medicalrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mr.ID = int(value.Int64)
		case medicalrecord.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				mr.Email = value.String
			}
		case medicalrecord.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				mr.Password = value.String
			}
		case medicalrecord.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mr.Name = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this MedicalRecord.
// Note that you need to call MedicalRecord.Unwrap() before calling this method if this MedicalRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (mr *MedicalRecord) Update() *MedicalRecordUpdateOne {
	return (&MedicalRecordClient{config: mr.config}).UpdateOne(mr)
}

// Unwrap unwraps the MedicalRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mr *MedicalRecord) Unwrap() *MedicalRecord {
	tx, ok := mr.config.driver.(*txDriver)
	if !ok {
		panic("ent: MedicalRecord is not a transactional entity")
	}
	mr.config.driver = tx.drv
	return mr
}

// String implements the fmt.Stringer.
func (mr *MedicalRecord) String() string {
	var builder strings.Builder
	builder.WriteString("MedicalRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", mr.ID))
	builder.WriteString(", email=")
	builder.WriteString(mr.Email)
	builder.WriteString(", password=")
	builder.WriteString(mr.Password)
	builder.WriteString(", name=")
	builder.WriteString(mr.Name)
	builder.WriteByte(')')
	return builder.String()
}

// MedicalRecords is a parsable slice of MedicalRecord.
type MedicalRecords []*MedicalRecord

func (mr MedicalRecords) config(cfg config) {
	for _i := range mr {
		mr[_i].config = cfg
	}
}

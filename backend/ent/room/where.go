// Code generated by entc, DO NOT EDIT.

package room

import (
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/team06/app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RoomName applies equality check predicate on the "roomName" field. It's identical to RoomNameEQ.
func RoomName(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomName), v))
	})
}

// RoomNameEQ applies the EQ predicate on the "roomName" field.
func RoomNameEQ(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomName), v))
	})
}

// RoomNameNEQ applies the NEQ predicate on the "roomName" field.
func RoomNameNEQ(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoomName), v))
	})
}

// RoomNameIn applies the In predicate on the "roomName" field.
func RoomNameIn(vs ...string) predicate.Room {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Room(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoomName), v...))
	})
}

// RoomNameNotIn applies the NotIn predicate on the "roomName" field.
func RoomNameNotIn(vs ...string) predicate.Room {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Room(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoomName), v...))
	})
}

// RoomNameGT applies the GT predicate on the "roomName" field.
func RoomNameGT(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoomName), v))
	})
}

// RoomNameGTE applies the GTE predicate on the "roomName" field.
func RoomNameGTE(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoomName), v))
	})
}

// RoomNameLT applies the LT predicate on the "roomName" field.
func RoomNameLT(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoomName), v))
	})
}

// RoomNameLTE applies the LTE predicate on the "roomName" field.
func RoomNameLTE(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoomName), v))
	})
}

// RoomNameContains applies the Contains predicate on the "roomName" field.
func RoomNameContains(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRoomName), v))
	})
}

// RoomNameHasPrefix applies the HasPrefix predicate on the "roomName" field.
func RoomNameHasPrefix(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRoomName), v))
	})
}

// RoomNameHasSuffix applies the HasSuffix predicate on the "roomName" field.
func RoomNameHasSuffix(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRoomName), v))
	})
}

// RoomNameEqualFold applies the EqualFold predicate on the "roomName" field.
func RoomNameEqualFold(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRoomName), v))
	})
}

// RoomNameContainsFold applies the ContainsFold predicate on the "roomName" field.
func RoomNameContainsFold(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRoomName), v))
	})
}

// HasRoomToAppointmentResults applies the HasEdge predicate on the "RoomToAppointmentResults" edge.
func HasRoomToAppointmentResults() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoomToAppointmentResultsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RoomToAppointmentResultsTable, RoomToAppointmentResultsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomToAppointmentResultsWith applies the HasEdge predicate on the "RoomToAppointmentResults" edge with a given conditions (other predicates).
func HasRoomToAppointmentResultsWith(preds ...predicate.AppointmentResults) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoomToAppointmentResultsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RoomToAppointmentResultsTable, RoomToAppointmentResultsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Room) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Room) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Room) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		p(s.Not())
	})
}

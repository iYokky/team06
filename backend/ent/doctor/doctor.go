// Code generated by entc, DO NOT EDIT.

package doctor

const (
	// Label holds the string label denoting the doctor type in the database.
	Label = "doctor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDoctorName holds the string denoting the doctorname field in the database.
	FieldDoctorName = "doctor_name"
	// FieldDoctorUsername holds the string denoting the doctorusername field in the database.
	FieldDoctorUsername = "doctor_username"
	// FieldDoctorPassword holds the string denoting the doctorpassword field in the database.
	FieldDoctorPassword = "doctor_password"

	// EdgeDoctorToDiagnosis holds the string denoting the doctortodiagnosis edge name in mutations.
	EdgeDoctorToDiagnosis = "DoctorToDiagnosis"
	// EdgeDoctorToAppointmentResults holds the string denoting the doctortoappointmentresults edge name in mutations.
	EdgeDoctorToAppointmentResults = "DoctorToAppointmentResults"
	// EdgeDoctorToMedicalProcedure holds the string denoting the doctortomedicalprocedure edge name in mutations.
	EdgeDoctorToMedicalProcedure = "DoctorToMedicalProcedure"

	// Table holds the table name of the doctor in the database.
	Table = "doctors"
	// DoctorToDiagnosisTable is the table the holds the DoctorToDiagnosis relation/edge.
	DoctorToDiagnosisTable = "diagnoses"
	// DoctorToDiagnosisInverseTable is the table name for the Diagnosis entity.
	// It exists in this package in order to avoid circular dependency with the "diagnosis" package.
	DoctorToDiagnosisInverseTable = "diagnoses"
	// DoctorToDiagnosisColumn is the table column denoting the DoctorToDiagnosis relation/edge.
	DoctorToDiagnosisColumn = "doctor_doctor_to_diagnosis"
	// DoctorToAppointmentResultsTable is the table the holds the DoctorToAppointmentResults relation/edge.
	DoctorToAppointmentResultsTable = "appointment_results"
	// DoctorToAppointmentResultsInverseTable is the table name for the AppointmentResults entity.
	// It exists in this package in order to avoid circular dependency with the "appointmentresults" package.
	DoctorToAppointmentResultsInverseTable = "appointment_results"
	// DoctorToAppointmentResultsColumn is the table column denoting the DoctorToAppointmentResults relation/edge.
	DoctorToAppointmentResultsColumn = "doctor_doctor_to_appointment_results"
	// DoctorToMedicalProcedureTable is the table the holds the DoctorToMedicalProcedure relation/edge.
	DoctorToMedicalProcedureTable = "medical_procedures"
	// DoctorToMedicalProcedureInverseTable is the table name for the MedicalProcedure entity.
	// It exists in this package in order to avoid circular dependency with the "medicalprocedure" package.
	DoctorToMedicalProcedureInverseTable = "medical_procedures"
	// DoctorToMedicalProcedureColumn is the table column denoting the DoctorToMedicalProcedure relation/edge.
	DoctorToMedicalProcedureColumn = "doctor_doctor_to_medical_procedure"
)

// Columns holds all SQL columns for doctor fields.
var Columns = []string{
	FieldID,
	FieldDoctorName,
	FieldDoctorUsername,
	FieldDoctorPassword,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DoctorNameValidator is a validator for the "doctorName" field. It is called by the builders before save.
	DoctorNameValidator func(string) error
	// DoctorUsernameValidator is a validator for the "doctorUsername" field. It is called by the builders before save.
	DoctorUsernameValidator func(string) error
	// DoctorPasswordValidator is a validator for the "doctorPassword" field. It is called by the builders before save.
	DoctorPasswordValidator func(string) error
)

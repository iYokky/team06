// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/bloodtype"
	"github.com/team06/app/ent/patient"
	"github.com/team06/app/ent/predicate"
)

// BloodTypeUpdate is the builder for updating BloodType entities.
type BloodTypeUpdate struct {
	config
	hooks    []Hook
	mutation *BloodTypeMutation
}

// Where adds a new predicate for the BloodTypeUpdate builder.
func (btu *BloodTypeUpdate) Where(ps ...predicate.BloodType) *BloodTypeUpdate {
	btu.mutation.predicates = append(btu.mutation.predicates, ps...)
	return btu
}

// SetBlood sets the "blood" field.
func (btu *BloodTypeUpdate) SetBlood(s string) *BloodTypeUpdate {
	btu.mutation.SetBlood(s)
	return btu
}

// AddBloodTypeToPatientIDs adds the "BloodTypeToPatient" edge to the Patient entity by IDs.
func (btu *BloodTypeUpdate) AddBloodTypeToPatientIDs(ids ...int) *BloodTypeUpdate {
	btu.mutation.AddBloodTypeToPatientIDs(ids...)
	return btu
}

// AddBloodTypeToPatient adds the "BloodTypeToPatient" edges to the Patient entity.
func (btu *BloodTypeUpdate) AddBloodTypeToPatient(p ...*Patient) *BloodTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return btu.AddBloodTypeToPatientIDs(ids...)
}

// Mutation returns the BloodTypeMutation object of the builder.
func (btu *BloodTypeUpdate) Mutation() *BloodTypeMutation {
	return btu.mutation
}

// ClearBloodTypeToPatient clears all "BloodTypeToPatient" edges to the Patient entity.
func (btu *BloodTypeUpdate) ClearBloodTypeToPatient() *BloodTypeUpdate {
	btu.mutation.ClearBloodTypeToPatient()
	return btu
}

// RemoveBloodTypeToPatientIDs removes the "BloodTypeToPatient" edge to Patient entities by IDs.
func (btu *BloodTypeUpdate) RemoveBloodTypeToPatientIDs(ids ...int) *BloodTypeUpdate {
	btu.mutation.RemoveBloodTypeToPatientIDs(ids...)
	return btu
}

// RemoveBloodTypeToPatient removes "BloodTypeToPatient" edges to Patient entities.
func (btu *BloodTypeUpdate) RemoveBloodTypeToPatient(p ...*Patient) *BloodTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return btu.RemoveBloodTypeToPatientIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (btu *BloodTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(btu.hooks) == 0 {
		if err = btu.check(); err != nil {
			return 0, err
		}
		affected, err = btu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BloodTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = btu.check(); err != nil {
				return 0, err
			}
			btu.mutation = mutation
			affected, err = btu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(btu.hooks) - 1; i >= 0; i-- {
			mut = btu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, btu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (btu *BloodTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := btu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (btu *BloodTypeUpdate) Exec(ctx context.Context) error {
	_, err := btu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btu *BloodTypeUpdate) ExecX(ctx context.Context) {
	if err := btu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (btu *BloodTypeUpdate) check() error {
	if v, ok := btu.mutation.Blood(); ok {
		if err := bloodtype.BloodValidator(v); err != nil {
			return &ValidationError{Name: "blood", err: fmt.Errorf("ent: validator failed for field \"blood\": %w", err)}
		}
	}
	return nil
}

func (btu *BloodTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bloodtype.Table,
			Columns: bloodtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bloodtype.FieldID,
			},
		},
	}
	if ps := btu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := btu.mutation.Blood(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bloodtype.FieldBlood,
		})
	}
	if btu.mutation.BloodTypeToPatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bloodtype.BloodTypeToPatientTable,
			Columns: []string{bloodtype.BloodTypeToPatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btu.mutation.RemovedBloodTypeToPatientIDs(); len(nodes) > 0 && !btu.mutation.BloodTypeToPatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bloodtype.BloodTypeToPatientTable,
			Columns: []string{bloodtype.BloodTypeToPatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btu.mutation.BloodTypeToPatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bloodtype.BloodTypeToPatientTable,
			Columns: []string{bloodtype.BloodTypeToPatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, btu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bloodtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BloodTypeUpdateOne is the builder for updating a single BloodType entity.
type BloodTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *BloodTypeMutation
}

// SetBlood sets the "blood" field.
func (btuo *BloodTypeUpdateOne) SetBlood(s string) *BloodTypeUpdateOne {
	btuo.mutation.SetBlood(s)
	return btuo
}

// AddBloodTypeToPatientIDs adds the "BloodTypeToPatient" edge to the Patient entity by IDs.
func (btuo *BloodTypeUpdateOne) AddBloodTypeToPatientIDs(ids ...int) *BloodTypeUpdateOne {
	btuo.mutation.AddBloodTypeToPatientIDs(ids...)
	return btuo
}

// AddBloodTypeToPatient adds the "BloodTypeToPatient" edges to the Patient entity.
func (btuo *BloodTypeUpdateOne) AddBloodTypeToPatient(p ...*Patient) *BloodTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return btuo.AddBloodTypeToPatientIDs(ids...)
}

// Mutation returns the BloodTypeMutation object of the builder.
func (btuo *BloodTypeUpdateOne) Mutation() *BloodTypeMutation {
	return btuo.mutation
}

// ClearBloodTypeToPatient clears all "BloodTypeToPatient" edges to the Patient entity.
func (btuo *BloodTypeUpdateOne) ClearBloodTypeToPatient() *BloodTypeUpdateOne {
	btuo.mutation.ClearBloodTypeToPatient()
	return btuo
}

// RemoveBloodTypeToPatientIDs removes the "BloodTypeToPatient" edge to Patient entities by IDs.
func (btuo *BloodTypeUpdateOne) RemoveBloodTypeToPatientIDs(ids ...int) *BloodTypeUpdateOne {
	btuo.mutation.RemoveBloodTypeToPatientIDs(ids...)
	return btuo
}

// RemoveBloodTypeToPatient removes "BloodTypeToPatient" edges to Patient entities.
func (btuo *BloodTypeUpdateOne) RemoveBloodTypeToPatient(p ...*Patient) *BloodTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return btuo.RemoveBloodTypeToPatientIDs(ids...)
}

// Save executes the query and returns the updated BloodType entity.
func (btuo *BloodTypeUpdateOne) Save(ctx context.Context) (*BloodType, error) {
	var (
		err  error
		node *BloodType
	)
	if len(btuo.hooks) == 0 {
		if err = btuo.check(); err != nil {
			return nil, err
		}
		node, err = btuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BloodTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = btuo.check(); err != nil {
				return nil, err
			}
			btuo.mutation = mutation
			node, err = btuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(btuo.hooks) - 1; i >= 0; i-- {
			mut = btuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, btuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (btuo *BloodTypeUpdateOne) SaveX(ctx context.Context) *BloodType {
	node, err := btuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (btuo *BloodTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := btuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btuo *BloodTypeUpdateOne) ExecX(ctx context.Context) {
	if err := btuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (btuo *BloodTypeUpdateOne) check() error {
	if v, ok := btuo.mutation.Blood(); ok {
		if err := bloodtype.BloodValidator(v); err != nil {
			return &ValidationError{Name: "blood", err: fmt.Errorf("ent: validator failed for field \"blood\": %w", err)}
		}
	}
	return nil
}

func (btuo *BloodTypeUpdateOne) sqlSave(ctx context.Context) (_node *BloodType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bloodtype.Table,
			Columns: bloodtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bloodtype.FieldID,
			},
		},
	}
	id, ok := btuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing BloodType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := btuo.mutation.Blood(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bloodtype.FieldBlood,
		})
	}
	if btuo.mutation.BloodTypeToPatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bloodtype.BloodTypeToPatientTable,
			Columns: []string{bloodtype.BloodTypeToPatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btuo.mutation.RemovedBloodTypeToPatientIDs(); len(nodes) > 0 && !btuo.mutation.BloodTypeToPatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bloodtype.BloodTypeToPatientTable,
			Columns: []string{bloodtype.BloodTypeToPatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btuo.mutation.BloodTypeToPatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bloodtype.BloodTypeToPatientTable,
			Columns: []string{bloodtype.BloodTypeToPatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BloodType{config: btuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, btuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bloodtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

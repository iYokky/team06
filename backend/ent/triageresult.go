// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/team06/app/ent/department"
	"github.com/team06/app/ent/nurse"
	"github.com/team06/app/ent/patient"
	"github.com/team06/app/ent/triageresult"
	"github.com/team06/app/ent/urgencylevel"
)

// TriageResult is the model entity for the TriageResult schema.
type TriageResult struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Symptom holds the value of the "symptom" field.
	Symptom string `json:"symptom,omitempty"`
	// TriageDate holds the value of the "triageDate" field.
	TriageDate time.Time `json:"triageDate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TriageResultQuery when eager-loading is set.
	Edges                                        TriageResultEdges `json:"edges"`
	department_department_to_triage_result       *int
	nurse_nurse_to_triage_result                 *int
	patient_patient_to_triage_result             *int
	urgency_level_urgency_level_to_triage_result *int
}

// TriageResultEdges holds the relations/edges for other nodes in the graph.
type TriageResultEdges struct {
	// TriageResultToUrgencyLevel holds the value of the triageResultToUrgencyLevel edge.
	TriageResultToUrgencyLevel *UrgencyLevel
	// TriageResultToDepartment holds the value of the triageResultToDepartment edge.
	TriageResultToDepartment *Department
	// TriageResultToNurse holds the value of the triageResultToNurse edge.
	TriageResultToNurse *Nurse
	// TriageResultToPatient holds the value of the triageResultToPatient edge.
	TriageResultToPatient *Patient
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TriageResultToUrgencyLevelOrErr returns the TriageResultToUrgencyLevel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TriageResultEdges) TriageResultToUrgencyLevelOrErr() (*UrgencyLevel, error) {
	if e.loadedTypes[0] {
		if e.TriageResultToUrgencyLevel == nil {
			// The edge triageResultToUrgencyLevel was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: urgencylevel.Label}
		}
		return e.TriageResultToUrgencyLevel, nil
	}
	return nil, &NotLoadedError{edge: "triageResultToUrgencyLevel"}
}

// TriageResultToDepartmentOrErr returns the TriageResultToDepartment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TriageResultEdges) TriageResultToDepartmentOrErr() (*Department, error) {
	if e.loadedTypes[1] {
		if e.TriageResultToDepartment == nil {
			// The edge triageResultToDepartment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.TriageResultToDepartment, nil
	}
	return nil, &NotLoadedError{edge: "triageResultToDepartment"}
}

// TriageResultToNurseOrErr returns the TriageResultToNurse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TriageResultEdges) TriageResultToNurseOrErr() (*Nurse, error) {
	if e.loadedTypes[2] {
		if e.TriageResultToNurse == nil {
			// The edge triageResultToNurse was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: nurse.Label}
		}
		return e.TriageResultToNurse, nil
	}
	return nil, &NotLoadedError{edge: "triageResultToNurse"}
}

// TriageResultToPatientOrErr returns the TriageResultToPatient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TriageResultEdges) TriageResultToPatientOrErr() (*Patient, error) {
	if e.loadedTypes[3] {
		if e.TriageResultToPatient == nil {
			// The edge triageResultToPatient was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.TriageResultToPatient, nil
	}
	return nil, &NotLoadedError{edge: "triageResultToPatient"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TriageResult) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case triageresult.FieldID:
			values[i] = &sql.NullInt64{}
		case triageresult.FieldSymptom:
			values[i] = &sql.NullString{}
		case triageresult.FieldTriageDate:
			values[i] = &sql.NullTime{}
		case triageresult.ForeignKeys[0]: // department_department_to_triage_result
			values[i] = &sql.NullInt64{}
		case triageresult.ForeignKeys[1]: // nurse_nurse_to_triage_result
			values[i] = &sql.NullInt64{}
		case triageresult.ForeignKeys[2]: // patient_patient_to_triage_result
			values[i] = &sql.NullInt64{}
		case triageresult.ForeignKeys[3]: // urgency_level_urgency_level_to_triage_result
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type TriageResult", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TriageResult fields.
func (tr *TriageResult) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case triageresult.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tr.ID = int(value.Int64)
		case triageresult.FieldSymptom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symptom", values[i])
			} else if value.Valid {
				tr.Symptom = value.String
			}
		case triageresult.FieldTriageDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field triageDate", values[i])
			} else if value.Valid {
				tr.TriageDate = value.Time
			}
		case triageresult.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field department_department_to_triage_result", value)
			} else if value.Valid {
				tr.department_department_to_triage_result = new(int)
				*tr.department_department_to_triage_result = int(value.Int64)
			}
		case triageresult.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field nurse_nurse_to_triage_result", value)
			} else if value.Valid {
				tr.nurse_nurse_to_triage_result = new(int)
				*tr.nurse_nurse_to_triage_result = int(value.Int64)
			}
		case triageresult.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field patient_patient_to_triage_result", value)
			} else if value.Valid {
				tr.patient_patient_to_triage_result = new(int)
				*tr.patient_patient_to_triage_result = int(value.Int64)
			}
		case triageresult.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field urgency_level_urgency_level_to_triage_result", value)
			} else if value.Valid {
				tr.urgency_level_urgency_level_to_triage_result = new(int)
				*tr.urgency_level_urgency_level_to_triage_result = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTriageResultToUrgencyLevel queries the "triageResultToUrgencyLevel" edge of the TriageResult entity.
func (tr *TriageResult) QueryTriageResultToUrgencyLevel() *UrgencyLevelQuery {
	return (&TriageResultClient{config: tr.config}).QueryTriageResultToUrgencyLevel(tr)
}

// QueryTriageResultToDepartment queries the "triageResultToDepartment" edge of the TriageResult entity.
func (tr *TriageResult) QueryTriageResultToDepartment() *DepartmentQuery {
	return (&TriageResultClient{config: tr.config}).QueryTriageResultToDepartment(tr)
}

// QueryTriageResultToNurse queries the "triageResultToNurse" edge of the TriageResult entity.
func (tr *TriageResult) QueryTriageResultToNurse() *NurseQuery {
	return (&TriageResultClient{config: tr.config}).QueryTriageResultToNurse(tr)
}

// QueryTriageResultToPatient queries the "triageResultToPatient" edge of the TriageResult entity.
func (tr *TriageResult) QueryTriageResultToPatient() *PatientQuery {
	return (&TriageResultClient{config: tr.config}).QueryTriageResultToPatient(tr)
}

// Update returns a builder for updating this TriageResult.
// Note that you need to call TriageResult.Unwrap() before calling this method if this TriageResult
// was returned from a transaction, and the transaction was committed or rolled back.
func (tr *TriageResult) Update() *TriageResultUpdateOne {
	return (&TriageResultClient{config: tr.config}).UpdateOne(tr)
}

// Unwrap unwraps the TriageResult entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tr *TriageResult) Unwrap() *TriageResult {
	tx, ok := tr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TriageResult is not a transactional entity")
	}
	tr.config.driver = tx.drv
	return tr
}

// String implements the fmt.Stringer.
func (tr *TriageResult) String() string {
	var builder strings.Builder
	builder.WriteString("TriageResult(")
	builder.WriteString(fmt.Sprintf("id=%v", tr.ID))
	builder.WriteString(", symptom=")
	builder.WriteString(tr.Symptom)
	builder.WriteString(", triageDate=")
	builder.WriteString(tr.TriageDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TriageResults is a parsable slice of TriageResult.
type TriageResults []*TriageResult

func (tr TriageResults) config(cfg config) {
	for _i := range tr {
		tr[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/medicalprocedure"
	"github.com/team06/app/ent/predicate"
	"github.com/team06/app/ent/proceduretype"
)

// ProcedureTypeUpdate is the builder for updating ProcedureType entities.
type ProcedureTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ProcedureTypeMutation
}

// Where adds a new predicate for the ProcedureTypeUpdate builder.
func (ptu *ProcedureTypeUpdate) Where(ps ...predicate.ProcedureType) *ProcedureTypeUpdate {
	ptu.mutation.predicates = append(ptu.mutation.predicates, ps...)
	return ptu
}

// SetProcedureName sets the "ProcedureName" field.
func (ptu *ProcedureTypeUpdate) SetProcedureName(s string) *ProcedureTypeUpdate {
	ptu.mutation.SetProcedureName(s)
	return ptu
}

// AddProcedureToMedicalProcedureIDs adds the "ProcedureToMedicalProcedure" edge to the MedicalProcedure entity by IDs.
func (ptu *ProcedureTypeUpdate) AddProcedureToMedicalProcedureIDs(ids ...int) *ProcedureTypeUpdate {
	ptu.mutation.AddProcedureToMedicalProcedureIDs(ids...)
	return ptu
}

// AddProcedureToMedicalProcedure adds the "ProcedureToMedicalProcedure" edges to the MedicalProcedure entity.
func (ptu *ProcedureTypeUpdate) AddProcedureToMedicalProcedure(m ...*MedicalProcedure) *ProcedureTypeUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ptu.AddProcedureToMedicalProcedureIDs(ids...)
}

// Mutation returns the ProcedureTypeMutation object of the builder.
func (ptu *ProcedureTypeUpdate) Mutation() *ProcedureTypeMutation {
	return ptu.mutation
}

// ClearProcedureToMedicalProcedure clears all "ProcedureToMedicalProcedure" edges to the MedicalProcedure entity.
func (ptu *ProcedureTypeUpdate) ClearProcedureToMedicalProcedure() *ProcedureTypeUpdate {
	ptu.mutation.ClearProcedureToMedicalProcedure()
	return ptu
}

// RemoveProcedureToMedicalProcedureIDs removes the "ProcedureToMedicalProcedure" edge to MedicalProcedure entities by IDs.
func (ptu *ProcedureTypeUpdate) RemoveProcedureToMedicalProcedureIDs(ids ...int) *ProcedureTypeUpdate {
	ptu.mutation.RemoveProcedureToMedicalProcedureIDs(ids...)
	return ptu
}

// RemoveProcedureToMedicalProcedure removes "ProcedureToMedicalProcedure" edges to MedicalProcedure entities.
func (ptu *ProcedureTypeUpdate) RemoveProcedureToMedicalProcedure(m ...*MedicalProcedure) *ProcedureTypeUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ptu.RemoveProcedureToMedicalProcedureIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *ProcedureTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ptu.hooks) == 0 {
		affected, err = ptu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcedureTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ptu.mutation = mutation
			affected, err = ptu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ptu.hooks) - 1; i >= 0; i-- {
			mut = ptu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *ProcedureTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *ProcedureTypeUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *ProcedureTypeUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ptu *ProcedureTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   proceduretype.Table,
			Columns: proceduretype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: proceduretype.FieldID,
			},
		},
	}
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.ProcedureName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proceduretype.FieldProcedureName,
		})
	}
	if ptu.mutation.ProcedureToMedicalProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   proceduretype.ProcedureToMedicalProcedureTable,
			Columns: []string{proceduretype.ProcedureToMedicalProcedureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalprocedure.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedProcedureToMedicalProcedureIDs(); len(nodes) > 0 && !ptu.mutation.ProcedureToMedicalProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   proceduretype.ProcedureToMedicalProcedureTable,
			Columns: []string{proceduretype.ProcedureToMedicalProcedureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalprocedure.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.ProcedureToMedicalProcedureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   proceduretype.ProcedureToMedicalProcedureTable,
			Columns: []string{proceduretype.ProcedureToMedicalProcedureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalprocedure.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proceduretype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProcedureTypeUpdateOne is the builder for updating a single ProcedureType entity.
type ProcedureTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProcedureTypeMutation
}

// SetProcedureName sets the "ProcedureName" field.
func (ptuo *ProcedureTypeUpdateOne) SetProcedureName(s string) *ProcedureTypeUpdateOne {
	ptuo.mutation.SetProcedureName(s)
	return ptuo
}

// AddProcedureToMedicalProcedureIDs adds the "ProcedureToMedicalProcedure" edge to the MedicalProcedure entity by IDs.
func (ptuo *ProcedureTypeUpdateOne) AddProcedureToMedicalProcedureIDs(ids ...int) *ProcedureTypeUpdateOne {
	ptuo.mutation.AddProcedureToMedicalProcedureIDs(ids...)
	return ptuo
}

// AddProcedureToMedicalProcedure adds the "ProcedureToMedicalProcedure" edges to the MedicalProcedure entity.
func (ptuo *ProcedureTypeUpdateOne) AddProcedureToMedicalProcedure(m ...*MedicalProcedure) *ProcedureTypeUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ptuo.AddProcedureToMedicalProcedureIDs(ids...)
}

// Mutation returns the ProcedureTypeMutation object of the builder.
func (ptuo *ProcedureTypeUpdateOne) Mutation() *ProcedureTypeMutation {
	return ptuo.mutation
}

// ClearProcedureToMedicalProcedure clears all "ProcedureToMedicalProcedure" edges to the MedicalProcedure entity.
func (ptuo *ProcedureTypeUpdateOne) ClearProcedureToMedicalProcedure() *ProcedureTypeUpdateOne {
	ptuo.mutation.ClearProcedureToMedicalProcedure()
	return ptuo
}

// RemoveProcedureToMedicalProcedureIDs removes the "ProcedureToMedicalProcedure" edge to MedicalProcedure entities by IDs.
func (ptuo *ProcedureTypeUpdateOne) RemoveProcedureToMedicalProcedureIDs(ids ...int) *ProcedureTypeUpdateOne {
	ptuo.mutation.RemoveProcedureToMedicalProcedureIDs(ids...)
	return ptuo
}

// RemoveProcedureToMedicalProcedure removes "ProcedureToMedicalProcedure" edges to MedicalProcedure entities.
func (ptuo *ProcedureTypeUpdateOne) RemoveProcedureToMedicalProcedure(m ...*MedicalProcedure) *ProcedureTypeUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ptuo.RemoveProcedureToMedicalProcedureIDs(ids...)
}

// Save executes the query and returns the updated ProcedureType entity.
func (ptuo *ProcedureTypeUpdateOne) Save(ctx context.Context) (*ProcedureType, error) {
	var (
		err  error
		node *ProcedureType
	)
	if len(ptuo.hooks) == 0 {
		node, err = ptuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcedureTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ptuo.mutation = mutation
			node, err = ptuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ptuo.hooks) - 1; i >= 0; i-- {
			mut = ptuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *ProcedureTypeUpdateOne) SaveX(ctx context.Context) *ProcedureType {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *ProcedureTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *ProcedureTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ptuo *ProcedureTypeUpdateOne) sqlSave(ctx context.Context) (_node *ProcedureType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   proceduretype.Table,
			Columns: proceduretype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: proceduretype.FieldID,
			},
		},
	}
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProcedureType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ptuo.mutation.ProcedureName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proceduretype.FieldProcedureName,
		})
	}
	if ptuo.mutation.ProcedureToMedicalProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   proceduretype.ProcedureToMedicalProcedureTable,
			Columns: []string{proceduretype.ProcedureToMedicalProcedureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalprocedure.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedProcedureToMedicalProcedureIDs(); len(nodes) > 0 && !ptuo.mutation.ProcedureToMedicalProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   proceduretype.ProcedureToMedicalProcedureTable,
			Columns: []string{proceduretype.ProcedureToMedicalProcedureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalprocedure.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.ProcedureToMedicalProcedureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   proceduretype.ProcedureToMedicalProcedureTable,
			Columns: []string{proceduretype.ProcedureToMedicalProcedureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalprocedure.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProcedureType{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proceduretype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

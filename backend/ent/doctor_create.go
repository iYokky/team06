// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/appointmentresults"
	"github.com/team06/app/ent/diagnosis"
	"github.com/team06/app/ent/doctor"
	"github.com/team06/app/ent/medicalprocedure"
)

// DoctorCreate is the builder for creating a Doctor entity.
type DoctorCreate struct {
	config
	mutation *DoctorMutation
	hooks    []Hook
}

// SetDoctorName sets the "doctorName" field.
func (dc *DoctorCreate) SetDoctorName(s string) *DoctorCreate {
	dc.mutation.SetDoctorName(s)
	return dc
}

// SetDoctorUsername sets the "doctorUsername" field.
func (dc *DoctorCreate) SetDoctorUsername(s string) *DoctorCreate {
	dc.mutation.SetDoctorUsername(s)
	return dc
}

// SetDoctorPassword sets the "doctorPassword" field.
func (dc *DoctorCreate) SetDoctorPassword(s string) *DoctorCreate {
	dc.mutation.SetDoctorPassword(s)
	return dc
}

// AddDoctorToDiagnosiIDs adds the "DoctorToDiagnosis" edge to the Diagnosis entity by IDs.
func (dc *DoctorCreate) AddDoctorToDiagnosiIDs(ids ...int) *DoctorCreate {
	dc.mutation.AddDoctorToDiagnosiIDs(ids...)
	return dc
}

// AddDoctorToDiagnosis adds the "DoctorToDiagnosis" edges to the Diagnosis entity.
func (dc *DoctorCreate) AddDoctorToDiagnosis(d ...*Diagnosis) *DoctorCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dc.AddDoctorToDiagnosiIDs(ids...)
}

// AddDoctorToAppointmentResultIDs adds the "DoctorToAppointmentResults" edge to the AppointmentResults entity by IDs.
func (dc *DoctorCreate) AddDoctorToAppointmentResultIDs(ids ...int) *DoctorCreate {
	dc.mutation.AddDoctorToAppointmentResultIDs(ids...)
	return dc
}

// AddDoctorToAppointmentResults adds the "DoctorToAppointmentResults" edges to the AppointmentResults entity.
func (dc *DoctorCreate) AddDoctorToAppointmentResults(a ...*AppointmentResults) *DoctorCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dc.AddDoctorToAppointmentResultIDs(ids...)
}

// AddDoctorToMedicalProcedureIDs adds the "DoctorToMedicalProcedure" edge to the MedicalProcedure entity by IDs.
func (dc *DoctorCreate) AddDoctorToMedicalProcedureIDs(ids ...int) *DoctorCreate {
	dc.mutation.AddDoctorToMedicalProcedureIDs(ids...)
	return dc
}

// AddDoctorToMedicalProcedure adds the "DoctorToMedicalProcedure" edges to the MedicalProcedure entity.
func (dc *DoctorCreate) AddDoctorToMedicalProcedure(m ...*MedicalProcedure) *DoctorCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return dc.AddDoctorToMedicalProcedureIDs(ids...)
}

// Mutation returns the DoctorMutation object of the builder.
func (dc *DoctorCreate) Mutation() *DoctorMutation {
	return dc.mutation
}

// Save creates the Doctor in the database.
func (dc *DoctorCreate) Save(ctx context.Context) (*Doctor, error) {
	var (
		err  error
		node *Doctor
	)
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DoctorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DoctorCreate) SaveX(ctx context.Context) *Doctor {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (dc *DoctorCreate) check() error {
	if _, ok := dc.mutation.DoctorName(); !ok {
		return &ValidationError{Name: "doctorName", err: errors.New("ent: missing required field \"doctorName\"")}
	}
	if v, ok := dc.mutation.DoctorName(); ok {
		if err := doctor.DoctorNameValidator(v); err != nil {
			return &ValidationError{Name: "doctorName", err: fmt.Errorf("ent: validator failed for field \"doctorName\": %w", err)}
		}
	}
	if _, ok := dc.mutation.DoctorUsername(); !ok {
		return &ValidationError{Name: "doctorUsername", err: errors.New("ent: missing required field \"doctorUsername\"")}
	}
	if v, ok := dc.mutation.DoctorUsername(); ok {
		if err := doctor.DoctorUsernameValidator(v); err != nil {
			return &ValidationError{Name: "doctorUsername", err: fmt.Errorf("ent: validator failed for field \"doctorUsername\": %w", err)}
		}
	}
	if _, ok := dc.mutation.DoctorPassword(); !ok {
		return &ValidationError{Name: "doctorPassword", err: errors.New("ent: missing required field \"doctorPassword\"")}
	}
	if v, ok := dc.mutation.DoctorPassword(); ok {
		if err := doctor.DoctorPasswordValidator(v); err != nil {
			return &ValidationError{Name: "doctorPassword", err: fmt.Errorf("ent: validator failed for field \"doctorPassword\": %w", err)}
		}
	}
	return nil
}

func (dc *DoctorCreate) sqlSave(ctx context.Context) (*Doctor, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dc *DoctorCreate) createSpec() (*Doctor, *sqlgraph.CreateSpec) {
	var (
		_node = &Doctor{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: doctor.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: doctor.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.DoctorName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctor.FieldDoctorName,
		})
		_node.DoctorName = value
	}
	if value, ok := dc.mutation.DoctorUsername(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctor.FieldDoctorUsername,
		})
		_node.DoctorUsername = value
	}
	if value, ok := dc.mutation.DoctorPassword(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctor.FieldDoctorPassword,
		})
		_node.DoctorPassword = value
	}
	if nodes := dc.mutation.DoctorToDiagnosisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.DoctorToDiagnosisTable,
			Columns: []string{doctor.DoctorToDiagnosisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diagnosis.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.DoctorToAppointmentResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.DoctorToAppointmentResultsTable,
			Columns: []string{doctor.DoctorToAppointmentResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appointmentresults.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.DoctorToMedicalProcedureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.DoctorToMedicalProcedureTable,
			Columns: []string{doctor.DoctorToMedicalProcedureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalprocedure.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DoctorCreateBulk is the builder for creating many Doctor entities in bulk.
type DoctorCreateBulk struct {
	config
	builders []*DoctorCreate
}

// Save creates the Doctor entities in the database.
func (dcb *DoctorCreateBulk) Save(ctx context.Context) ([]*Doctor, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Doctor, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DoctorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DoctorCreateBulk) SaveX(ctx context.Context) []*Doctor {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package appointmentresults

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/team06/app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AddtimeAppoint applies equality check predicate on the "addtimeAppoint" field. It's identical to AddtimeAppointEQ.
func AddtimeAppoint(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddtimeAppoint), v))
	})
}

// AddtimeSave applies equality check predicate on the "addtimeSave" field. It's identical to AddtimeSaveEQ.
func AddtimeSave(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddtimeSave), v))
	})
}

// AddtimeAppointEQ applies the EQ predicate on the "addtimeAppoint" field.
func AddtimeAppointEQ(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddtimeAppoint), v))
	})
}

// AddtimeAppointNEQ applies the NEQ predicate on the "addtimeAppoint" field.
func AddtimeAppointNEQ(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddtimeAppoint), v))
	})
}

// AddtimeAppointIn applies the In predicate on the "addtimeAppoint" field.
func AddtimeAppointIn(vs ...time.Time) predicate.AppointmentResults {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddtimeAppoint), v...))
	})
}

// AddtimeAppointNotIn applies the NotIn predicate on the "addtimeAppoint" field.
func AddtimeAppointNotIn(vs ...time.Time) predicate.AppointmentResults {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddtimeAppoint), v...))
	})
}

// AddtimeAppointGT applies the GT predicate on the "addtimeAppoint" field.
func AddtimeAppointGT(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddtimeAppoint), v))
	})
}

// AddtimeAppointGTE applies the GTE predicate on the "addtimeAppoint" field.
func AddtimeAppointGTE(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddtimeAppoint), v))
	})
}

// AddtimeAppointLT applies the LT predicate on the "addtimeAppoint" field.
func AddtimeAppointLT(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddtimeAppoint), v))
	})
}

// AddtimeAppointLTE applies the LTE predicate on the "addtimeAppoint" field.
func AddtimeAppointLTE(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddtimeAppoint), v))
	})
}

// AddtimeSaveEQ applies the EQ predicate on the "addtimeSave" field.
func AddtimeSaveEQ(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddtimeSave), v))
	})
}

// AddtimeSaveNEQ applies the NEQ predicate on the "addtimeSave" field.
func AddtimeSaveNEQ(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddtimeSave), v))
	})
}

// AddtimeSaveIn applies the In predicate on the "addtimeSave" field.
func AddtimeSaveIn(vs ...time.Time) predicate.AppointmentResults {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddtimeSave), v...))
	})
}

// AddtimeSaveNotIn applies the NotIn predicate on the "addtimeSave" field.
func AddtimeSaveNotIn(vs ...time.Time) predicate.AppointmentResults {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddtimeSave), v...))
	})
}

// AddtimeSaveGT applies the GT predicate on the "addtimeSave" field.
func AddtimeSaveGT(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddtimeSave), v))
	})
}

// AddtimeSaveGTE applies the GTE predicate on the "addtimeSave" field.
func AddtimeSaveGTE(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddtimeSave), v))
	})
}

// AddtimeSaveLT applies the LT predicate on the "addtimeSave" field.
func AddtimeSaveLT(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddtimeSave), v))
	})
}

// AddtimeSaveLTE applies the LTE predicate on the "addtimeSave" field.
func AddtimeSaveLTE(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddtimeSave), v))
	})
}

// HasAppointmentResultsToPatient applies the HasEdge predicate on the "appointmentResultsToPatient" edge.
func HasAppointmentResultsToPatient() predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppointmentResultsToPatientTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppointmentResultsToPatientTable, AppointmentResultsToPatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppointmentResultsToPatientWith applies the HasEdge predicate on the "appointmentResultsToPatient" edge with a given conditions (other predicates).
func HasAppointmentResultsToPatientWith(preds ...predicate.Patient) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppointmentResultsToPatientInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppointmentResultsToPatientTable, AppointmentResultsToPatientColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppointmentResultsToNurse applies the HasEdge predicate on the "appointmentResultsToNurse" edge.
func HasAppointmentResultsToNurse() predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppointmentResultsToNurseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppointmentResultsToNurseTable, AppointmentResultsToNurseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppointmentResultsToNurseWith applies the HasEdge predicate on the "appointmentResultsToNurse" edge with a given conditions (other predicates).
func HasAppointmentResultsToNurseWith(preds ...predicate.Nurse) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppointmentResultsToNurseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppointmentResultsToNurseTable, AppointmentResultsToNurseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppointmentResultsToDoctor applies the HasEdge predicate on the "appointmentResultsToDoctor" edge.
func HasAppointmentResultsToDoctor() predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppointmentResultsToDoctorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppointmentResultsToDoctorTable, AppointmentResultsToDoctorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppointmentResultsToDoctorWith applies the HasEdge predicate on the "appointmentResultsToDoctor" edge with a given conditions (other predicates).
func HasAppointmentResultsToDoctorWith(preds ...predicate.Doctor) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppointmentResultsToDoctorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppointmentResultsToDoctorTable, AppointmentResultsToDoctorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppointmentResultsToRoom applies the HasEdge predicate on the "appointmentResultsToRoom" edge.
func HasAppointmentResultsToRoom() predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppointmentResultsToRoomTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppointmentResultsToRoomTable, AppointmentResultsToRoomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppointmentResultsToRoomWith applies the HasEdge predicate on the "appointmentResultsToRoom" edge with a given conditions (other predicates).
func HasAppointmentResultsToRoomWith(preds ...predicate.Room) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppointmentResultsToRoomInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppointmentResultsToRoomTable, AppointmentResultsToRoomColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppointmentResults) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppointmentResults) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppointmentResults) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		p(s.Not())
	})
}

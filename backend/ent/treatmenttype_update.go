// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/diagnosis"
	"github.com/team06/app/ent/predicate"
	"github.com/team06/app/ent/treatmenttype"
)

// TreatmentTypeUpdate is the builder for updating TreatmentType entities.
type TreatmentTypeUpdate struct {
	config
	hooks    []Hook
	mutation *TreatmentTypeMutation
}

// Where adds a new predicate for the TreatmentTypeUpdate builder.
func (ttu *TreatmentTypeUpdate) Where(ps ...predicate.TreatmentType) *TreatmentTypeUpdate {
	ttu.mutation.predicates = append(ttu.mutation.predicates, ps...)
	return ttu
}

// SetType sets the "Type" field.
func (ttu *TreatmentTypeUpdate) SetType(s string) *TreatmentTypeUpdate {
	ttu.mutation.SetType(s)
	return ttu
}

// AddTreatmentTypeToDiagnosiIDs adds the "TreatmentTypeToDiagnosis" edge to the Diagnosis entity by IDs.
func (ttu *TreatmentTypeUpdate) AddTreatmentTypeToDiagnosiIDs(ids ...int) *TreatmentTypeUpdate {
	ttu.mutation.AddTreatmentTypeToDiagnosiIDs(ids...)
	return ttu
}

// AddTreatmentTypeToDiagnosis adds the "TreatmentTypeToDiagnosis" edges to the Diagnosis entity.
func (ttu *TreatmentTypeUpdate) AddTreatmentTypeToDiagnosis(d ...*Diagnosis) *TreatmentTypeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ttu.AddTreatmentTypeToDiagnosiIDs(ids...)
}

// Mutation returns the TreatmentTypeMutation object of the builder.
func (ttu *TreatmentTypeUpdate) Mutation() *TreatmentTypeMutation {
	return ttu.mutation
}

// ClearTreatmentTypeToDiagnosis clears all "TreatmentTypeToDiagnosis" edges to the Diagnosis entity.
func (ttu *TreatmentTypeUpdate) ClearTreatmentTypeToDiagnosis() *TreatmentTypeUpdate {
	ttu.mutation.ClearTreatmentTypeToDiagnosis()
	return ttu
}

// RemoveTreatmentTypeToDiagnosiIDs removes the "TreatmentTypeToDiagnosis" edge to Diagnosis entities by IDs.
func (ttu *TreatmentTypeUpdate) RemoveTreatmentTypeToDiagnosiIDs(ids ...int) *TreatmentTypeUpdate {
	ttu.mutation.RemoveTreatmentTypeToDiagnosiIDs(ids...)
	return ttu
}

// RemoveTreatmentTypeToDiagnosis removes "TreatmentTypeToDiagnosis" edges to Diagnosis entities.
func (ttu *TreatmentTypeUpdate) RemoveTreatmentTypeToDiagnosis(d ...*Diagnosis) *TreatmentTypeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ttu.RemoveTreatmentTypeToDiagnosiIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TreatmentTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ttu.hooks) == 0 {
		if err = ttu.check(); err != nil {
			return 0, err
		}
		affected, err = ttu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TreatmentTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttu.check(); err != nil {
				return 0, err
			}
			ttu.mutation = mutation
			affected, err = ttu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ttu.hooks) - 1; i >= 0; i-- {
			mut = ttu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TreatmentTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TreatmentTypeUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TreatmentTypeUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttu *TreatmentTypeUpdate) check() error {
	if v, ok := ttu.mutation.GetType(); ok {
		if err := treatmenttype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf("ent: validator failed for field \"Type\": %w", err)}
		}
	}
	return nil
}

func (ttu *TreatmentTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   treatmenttype.Table,
			Columns: treatmenttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: treatmenttype.FieldID,
			},
		},
	}
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: treatmenttype.FieldType,
		})
	}
	if ttu.mutation.TreatmentTypeToDiagnosisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   treatmenttype.TreatmentTypeToDiagnosisTable,
			Columns: []string{treatmenttype.TreatmentTypeToDiagnosisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diagnosis.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.RemovedTreatmentTypeToDiagnosisIDs(); len(nodes) > 0 && !ttu.mutation.TreatmentTypeToDiagnosisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   treatmenttype.TreatmentTypeToDiagnosisTable,
			Columns: []string{treatmenttype.TreatmentTypeToDiagnosisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diagnosis.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.TreatmentTypeToDiagnosisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   treatmenttype.TreatmentTypeToDiagnosisTable,
			Columns: []string{treatmenttype.TreatmentTypeToDiagnosisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diagnosis.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{treatmenttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TreatmentTypeUpdateOne is the builder for updating a single TreatmentType entity.
type TreatmentTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *TreatmentTypeMutation
}

// SetType sets the "Type" field.
func (ttuo *TreatmentTypeUpdateOne) SetType(s string) *TreatmentTypeUpdateOne {
	ttuo.mutation.SetType(s)
	return ttuo
}

// AddTreatmentTypeToDiagnosiIDs adds the "TreatmentTypeToDiagnosis" edge to the Diagnosis entity by IDs.
func (ttuo *TreatmentTypeUpdateOne) AddTreatmentTypeToDiagnosiIDs(ids ...int) *TreatmentTypeUpdateOne {
	ttuo.mutation.AddTreatmentTypeToDiagnosiIDs(ids...)
	return ttuo
}

// AddTreatmentTypeToDiagnosis adds the "TreatmentTypeToDiagnosis" edges to the Diagnosis entity.
func (ttuo *TreatmentTypeUpdateOne) AddTreatmentTypeToDiagnosis(d ...*Diagnosis) *TreatmentTypeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ttuo.AddTreatmentTypeToDiagnosiIDs(ids...)
}

// Mutation returns the TreatmentTypeMutation object of the builder.
func (ttuo *TreatmentTypeUpdateOne) Mutation() *TreatmentTypeMutation {
	return ttuo.mutation
}

// ClearTreatmentTypeToDiagnosis clears all "TreatmentTypeToDiagnosis" edges to the Diagnosis entity.
func (ttuo *TreatmentTypeUpdateOne) ClearTreatmentTypeToDiagnosis() *TreatmentTypeUpdateOne {
	ttuo.mutation.ClearTreatmentTypeToDiagnosis()
	return ttuo
}

// RemoveTreatmentTypeToDiagnosiIDs removes the "TreatmentTypeToDiagnosis" edge to Diagnosis entities by IDs.
func (ttuo *TreatmentTypeUpdateOne) RemoveTreatmentTypeToDiagnosiIDs(ids ...int) *TreatmentTypeUpdateOne {
	ttuo.mutation.RemoveTreatmentTypeToDiagnosiIDs(ids...)
	return ttuo
}

// RemoveTreatmentTypeToDiagnosis removes "TreatmentTypeToDiagnosis" edges to Diagnosis entities.
func (ttuo *TreatmentTypeUpdateOne) RemoveTreatmentTypeToDiagnosis(d ...*Diagnosis) *TreatmentTypeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ttuo.RemoveTreatmentTypeToDiagnosiIDs(ids...)
}

// Save executes the query and returns the updated TreatmentType entity.
func (ttuo *TreatmentTypeUpdateOne) Save(ctx context.Context) (*TreatmentType, error) {
	var (
		err  error
		node *TreatmentType
	)
	if len(ttuo.hooks) == 0 {
		if err = ttuo.check(); err != nil {
			return nil, err
		}
		node, err = ttuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TreatmentTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttuo.check(); err != nil {
				return nil, err
			}
			ttuo.mutation = mutation
			node, err = ttuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ttuo.hooks) - 1; i >= 0; i-- {
			mut = ttuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TreatmentTypeUpdateOne) SaveX(ctx context.Context) *TreatmentType {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TreatmentTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TreatmentTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttuo *TreatmentTypeUpdateOne) check() error {
	if v, ok := ttuo.mutation.GetType(); ok {
		if err := treatmenttype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf("ent: validator failed for field \"Type\": %w", err)}
		}
	}
	return nil
}

func (ttuo *TreatmentTypeUpdateOne) sqlSave(ctx context.Context) (_node *TreatmentType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   treatmenttype.Table,
			Columns: treatmenttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: treatmenttype.FieldID,
			},
		},
	}
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TreatmentType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ttuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: treatmenttype.FieldType,
		})
	}
	if ttuo.mutation.TreatmentTypeToDiagnosisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   treatmenttype.TreatmentTypeToDiagnosisTable,
			Columns: []string{treatmenttype.TreatmentTypeToDiagnosisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diagnosis.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.RemovedTreatmentTypeToDiagnosisIDs(); len(nodes) > 0 && !ttuo.mutation.TreatmentTypeToDiagnosisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   treatmenttype.TreatmentTypeToDiagnosisTable,
			Columns: []string{treatmenttype.TreatmentTypeToDiagnosisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diagnosis.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.TreatmentTypeToDiagnosisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   treatmenttype.TreatmentTypeToDiagnosisTable,
			Columns: []string{treatmenttype.TreatmentTypeToDiagnosisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diagnosis.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TreatmentType{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{treatmenttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

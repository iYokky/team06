// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/doctor"
	"github.com/team06/app/ent/medicalprocedure"
	"github.com/team06/app/ent/patient"
	"github.com/team06/app/ent/proceduretype"
)

// MedicalProcedureCreate is the builder for creating a MedicalProcedure entity.
type MedicalProcedureCreate struct {
	config
	mutation *MedicalProcedureMutation
	hooks    []Hook
}

// SetAddtime sets the "Addtime" field.
func (mpc *MedicalProcedureCreate) SetAddtime(t time.Time) *MedicalProcedureCreate {
	mpc.mutation.SetAddtime(t)
	return mpc
}

// SetPatientID sets the "Patient" edge to the Patient entity by ID.
func (mpc *MedicalProcedureCreate) SetPatientID(id int) *MedicalProcedureCreate {
	mpc.mutation.SetPatientID(id)
	return mpc
}

// SetNillablePatientID sets the "Patient" edge to the Patient entity by ID if the given value is not nil.
func (mpc *MedicalProcedureCreate) SetNillablePatientID(id *int) *MedicalProcedureCreate {
	if id != nil {
		mpc = mpc.SetPatientID(*id)
	}
	return mpc
}

// SetPatient sets the "Patient" edge to the Patient entity.
func (mpc *MedicalProcedureCreate) SetPatient(p *Patient) *MedicalProcedureCreate {
	return mpc.SetPatientID(p.ID)
}

// SetProcedureTypeID sets the "ProcedureType" edge to the ProcedureType entity by ID.
func (mpc *MedicalProcedureCreate) SetProcedureTypeID(id int) *MedicalProcedureCreate {
	mpc.mutation.SetProcedureTypeID(id)
	return mpc
}

// SetNillableProcedureTypeID sets the "ProcedureType" edge to the ProcedureType entity by ID if the given value is not nil.
func (mpc *MedicalProcedureCreate) SetNillableProcedureTypeID(id *int) *MedicalProcedureCreate {
	if id != nil {
		mpc = mpc.SetProcedureTypeID(*id)
	}
	return mpc
}

// SetProcedureType sets the "ProcedureType" edge to the ProcedureType entity.
func (mpc *MedicalProcedureCreate) SetProcedureType(p *ProcedureType) *MedicalProcedureCreate {
	return mpc.SetProcedureTypeID(p.ID)
}

// SetDoctorID sets the "Doctor" edge to the Doctor entity by ID.
func (mpc *MedicalProcedureCreate) SetDoctorID(id int) *MedicalProcedureCreate {
	mpc.mutation.SetDoctorID(id)
	return mpc
}

// SetNillableDoctorID sets the "Doctor" edge to the Doctor entity by ID if the given value is not nil.
func (mpc *MedicalProcedureCreate) SetNillableDoctorID(id *int) *MedicalProcedureCreate {
	if id != nil {
		mpc = mpc.SetDoctorID(*id)
	}
	return mpc
}

// SetDoctor sets the "Doctor" edge to the Doctor entity.
func (mpc *MedicalProcedureCreate) SetDoctor(d *Doctor) *MedicalProcedureCreate {
	return mpc.SetDoctorID(d.ID)
}

// Mutation returns the MedicalProcedureMutation object of the builder.
func (mpc *MedicalProcedureCreate) Mutation() *MedicalProcedureMutation {
	return mpc.mutation
}

// Save creates the MedicalProcedure in the database.
func (mpc *MedicalProcedureCreate) Save(ctx context.Context) (*MedicalProcedure, error) {
	var (
		err  error
		node *MedicalProcedure
	)
	if len(mpc.hooks) == 0 {
		if err = mpc.check(); err != nil {
			return nil, err
		}
		node, err = mpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicalProcedureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mpc.check(); err != nil {
				return nil, err
			}
			mpc.mutation = mutation
			node, err = mpc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mpc.hooks) - 1; i >= 0; i-- {
			mut = mpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mpc *MedicalProcedureCreate) SaveX(ctx context.Context) *MedicalProcedure {
	v, err := mpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (mpc *MedicalProcedureCreate) check() error {
	if _, ok := mpc.mutation.Addtime(); !ok {
		return &ValidationError{Name: "Addtime", err: errors.New("ent: missing required field \"Addtime\"")}
	}
	return nil
}

func (mpc *MedicalProcedureCreate) sqlSave(ctx context.Context) (*MedicalProcedure, error) {
	_node, _spec := mpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mpc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mpc *MedicalProcedureCreate) createSpec() (*MedicalProcedure, *sqlgraph.CreateSpec) {
	var (
		_node = &MedicalProcedure{config: mpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: medicalprocedure.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medicalprocedure.FieldID,
			},
		}
	)
	if value, ok := mpc.mutation.Addtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: medicalprocedure.FieldAddtime,
		})
		_node.Addtime = value
	}
	if nodes := mpc.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprocedure.PatientTable,
			Columns: []string{medicalprocedure.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mpc.mutation.ProcedureTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprocedure.ProcedureTypeTable,
			Columns: []string{medicalprocedure.ProcedureTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: proceduretype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mpc.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprocedure.DoctorTable,
			Columns: []string{medicalprocedure.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MedicalProcedureCreateBulk is the builder for creating many MedicalProcedure entities in bulk.
type MedicalProcedureCreateBulk struct {
	config
	builders []*MedicalProcedureCreate
}

// Save creates the MedicalProcedure entities in the database.
func (mpcb *MedicalProcedureCreateBulk) Save(ctx context.Context) ([]*MedicalProcedure, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mpcb.builders))
	nodes := make([]*MedicalProcedure, len(mpcb.builders))
	mutators := make([]Mutator, len(mpcb.builders))
	for i := range mpcb.builders {
		func(i int, root context.Context) {
			builder := mpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MedicalProcedureMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mpcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mpcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mpcb *MedicalProcedureCreateBulk) SaveX(ctx context.Context) []*MedicalProcedure {
	v, err := mpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/medicalrecord"
)

// MedicalRecordCreate is the builder for creating a MedicalRecord entity.
type MedicalRecordCreate struct {
	config
	mutation *MedicalRecordMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (mrc *MedicalRecordCreate) SetEmail(s string) *MedicalRecordCreate {
	mrc.mutation.SetEmail(s)
	return mrc
}

// SetPassword sets the "password" field.
func (mrc *MedicalRecordCreate) SetPassword(s string) *MedicalRecordCreate {
	mrc.mutation.SetPassword(s)
	return mrc
}

// SetName sets the "name" field.
func (mrc *MedicalRecordCreate) SetName(s string) *MedicalRecordCreate {
	mrc.mutation.SetName(s)
	return mrc
}

// Mutation returns the MedicalRecordMutation object of the builder.
func (mrc *MedicalRecordCreate) Mutation() *MedicalRecordMutation {
	return mrc.mutation
}

// Save creates the MedicalRecord in the database.
func (mrc *MedicalRecordCreate) Save(ctx context.Context) (*MedicalRecord, error) {
	var (
		err  error
		node *MedicalRecord
	)
	if len(mrc.hooks) == 0 {
		if err = mrc.check(); err != nil {
			return nil, err
		}
		node, err = mrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicalRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mrc.check(); err != nil {
				return nil, err
			}
			mrc.mutation = mutation
			node, err = mrc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mrc.hooks) - 1; i >= 0; i-- {
			mut = mrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mrc *MedicalRecordCreate) SaveX(ctx context.Context) *MedicalRecord {
	v, err := mrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (mrc *MedicalRecordCreate) check() error {
	if _, ok := mrc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New("ent: missing required field \"email\"")}
	}
	if v, ok := mrc.mutation.Email(); ok {
		if err := medicalrecord.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if _, ok := mrc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New("ent: missing required field \"password\"")}
	}
	if v, ok := mrc.mutation.Password(); ok {
		if err := medicalrecord.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	if _, ok := mrc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := mrc.mutation.Name(); ok {
		if err := medicalrecord.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (mrc *MedicalRecordCreate) sqlSave(ctx context.Context) (*MedicalRecord, error) {
	_node, _spec := mrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mrc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mrc *MedicalRecordCreate) createSpec() (*MedicalRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &MedicalRecord{config: mrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: medicalrecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medicalrecord.FieldID,
			},
		}
	)
	if value, ok := mrc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalrecord.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := mrc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalrecord.FieldPassword,
		})
		_node.Password = value
	}
	if value, ok := mrc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalrecord.FieldName,
		})
		_node.Name = value
	}
	return _node, _spec
}

// MedicalRecordCreateBulk is the builder for creating many MedicalRecord entities in bulk.
type MedicalRecordCreateBulk struct {
	config
	builders []*MedicalRecordCreate
}

// Save creates the MedicalRecord entities in the database.
func (mrcb *MedicalRecordCreateBulk) Save(ctx context.Context) ([]*MedicalRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mrcb.builders))
	nodes := make([]*MedicalRecord, len(mrcb.builders))
	mutators := make([]Mutator, len(mrcb.builders))
	for i := range mrcb.builders {
		func(i int, root context.Context) {
			builder := mrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MedicalRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mrcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mrcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mrcb *MedicalRecordCreateBulk) SaveX(ctx context.Context) []*MedicalRecord {
	v, err := mrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/team06/app/ent/proceduretype"
)

// ProcedureType is the model entity for the ProcedureType schema.
type ProcedureType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ProcedureName holds the value of the "ProcedureName" field.
	ProcedureName string `json:"ProcedureName,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProcedureTypeQuery when eager-loading is set.
	Edges ProcedureTypeEdges `json:"edges"`
}

// ProcedureTypeEdges holds the relations/edges for other nodes in the graph.
type ProcedureTypeEdges struct {
	// ProcedureToMedicalProcedure holds the value of the ProcedureToMedicalProcedure edge.
	ProcedureToMedicalProcedure []*MedicalProcedure
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProcedureToMedicalProcedureOrErr returns the ProcedureToMedicalProcedure value or an error if the edge
// was not loaded in eager-loading.
func (e ProcedureTypeEdges) ProcedureToMedicalProcedureOrErr() ([]*MedicalProcedure, error) {
	if e.loadedTypes[0] {
		return e.ProcedureToMedicalProcedure, nil
	}
	return nil, &NotLoadedError{edge: "ProcedureToMedicalProcedure"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProcedureType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case proceduretype.FieldID:
			values[i] = &sql.NullInt64{}
		case proceduretype.FieldProcedureName:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProcedureType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProcedureType fields.
func (pt *ProcedureType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case proceduretype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pt.ID = int(value.Int64)
		case proceduretype.FieldProcedureName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ProcedureName", values[i])
			} else if value.Valid {
				pt.ProcedureName = value.String
			}
		}
	}
	return nil
}

// QueryProcedureToMedicalProcedure queries the "ProcedureToMedicalProcedure" edge of the ProcedureType entity.
func (pt *ProcedureType) QueryProcedureToMedicalProcedure() *MedicalProcedureQuery {
	return (&ProcedureTypeClient{config: pt.config}).QueryProcedureToMedicalProcedure(pt)
}

// Update returns a builder for updating this ProcedureType.
// Note that you need to call ProcedureType.Unwrap() before calling this method if this ProcedureType
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *ProcedureType) Update() *ProcedureTypeUpdateOne {
	return (&ProcedureTypeClient{config: pt.config}).UpdateOne(pt)
}

// Unwrap unwraps the ProcedureType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *ProcedureType) Unwrap() *ProcedureType {
	tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProcedureType is not a transactional entity")
	}
	pt.config.driver = tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *ProcedureType) String() string {
	var builder strings.Builder
	builder.WriteString("ProcedureType(")
	builder.WriteString(fmt.Sprintf("id=%v", pt.ID))
	builder.WriteString(", ProcedureName=")
	builder.WriteString(pt.ProcedureName)
	builder.WriteByte(')')
	return builder.String()
}

// ProcedureTypes is a parsable slice of ProcedureType.
type ProcedureTypes []*ProcedureType

func (pt ProcedureTypes) config(cfg config) {
	for _i := range pt {
		pt[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/medicalrecord"
	"github.com/team06/app/ent/predicate"
)

// MedicalRecordUpdate is the builder for updating MedicalRecord entities.
type MedicalRecordUpdate struct {
	config
	hooks    []Hook
	mutation *MedicalRecordMutation
}

// Where adds a new predicate for the MedicalRecordUpdate builder.
func (mru *MedicalRecordUpdate) Where(ps ...predicate.MedicalRecord) *MedicalRecordUpdate {
	mru.mutation.predicates = append(mru.mutation.predicates, ps...)
	return mru
}

// SetEmail sets the "email" field.
func (mru *MedicalRecordUpdate) SetEmail(s string) *MedicalRecordUpdate {
	mru.mutation.SetEmail(s)
	return mru
}

// SetPassword sets the "password" field.
func (mru *MedicalRecordUpdate) SetPassword(s string) *MedicalRecordUpdate {
	mru.mutation.SetPassword(s)
	return mru
}

// SetName sets the "name" field.
func (mru *MedicalRecordUpdate) SetName(s string) *MedicalRecordUpdate {
	mru.mutation.SetName(s)
	return mru
}

// Mutation returns the MedicalRecordMutation object of the builder.
func (mru *MedicalRecordUpdate) Mutation() *MedicalRecordMutation {
	return mru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mru *MedicalRecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mru.hooks) == 0 {
		if err = mru.check(); err != nil {
			return 0, err
		}
		affected, err = mru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicalRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mru.check(); err != nil {
				return 0, err
			}
			mru.mutation = mutation
			affected, err = mru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mru.hooks) - 1; i >= 0; i-- {
			mut = mru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mru *MedicalRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := mru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mru *MedicalRecordUpdate) Exec(ctx context.Context) error {
	_, err := mru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mru *MedicalRecordUpdate) ExecX(ctx context.Context) {
	if err := mru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mru *MedicalRecordUpdate) check() error {
	if v, ok := mru.mutation.Email(); ok {
		if err := medicalrecord.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if v, ok := mru.mutation.Password(); ok {
		if err := medicalrecord.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	if v, ok := mru.mutation.Name(); ok {
		if err := medicalrecord.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (mru *MedicalRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   medicalrecord.Table,
			Columns: medicalrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medicalrecord.FieldID,
			},
		},
	}
	if ps := mru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mru.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalrecord.FieldEmail,
		})
	}
	if value, ok := mru.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalrecord.FieldPassword,
		})
	}
	if value, ok := mru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalrecord.FieldName,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MedicalRecordUpdateOne is the builder for updating a single MedicalRecord entity.
type MedicalRecordUpdateOne struct {
	config
	hooks    []Hook
	mutation *MedicalRecordMutation
}

// SetEmail sets the "email" field.
func (mruo *MedicalRecordUpdateOne) SetEmail(s string) *MedicalRecordUpdateOne {
	mruo.mutation.SetEmail(s)
	return mruo
}

// SetPassword sets the "password" field.
func (mruo *MedicalRecordUpdateOne) SetPassword(s string) *MedicalRecordUpdateOne {
	mruo.mutation.SetPassword(s)
	return mruo
}

// SetName sets the "name" field.
func (mruo *MedicalRecordUpdateOne) SetName(s string) *MedicalRecordUpdateOne {
	mruo.mutation.SetName(s)
	return mruo
}

// Mutation returns the MedicalRecordMutation object of the builder.
func (mruo *MedicalRecordUpdateOne) Mutation() *MedicalRecordMutation {
	return mruo.mutation
}

// Save executes the query and returns the updated MedicalRecord entity.
func (mruo *MedicalRecordUpdateOne) Save(ctx context.Context) (*MedicalRecord, error) {
	var (
		err  error
		node *MedicalRecord
	)
	if len(mruo.hooks) == 0 {
		if err = mruo.check(); err != nil {
			return nil, err
		}
		node, err = mruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicalRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mruo.check(); err != nil {
				return nil, err
			}
			mruo.mutation = mutation
			node, err = mruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mruo.hooks) - 1; i >= 0; i-- {
			mut = mruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mruo *MedicalRecordUpdateOne) SaveX(ctx context.Context) *MedicalRecord {
	node, err := mruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mruo *MedicalRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := mruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mruo *MedicalRecordUpdateOne) ExecX(ctx context.Context) {
	if err := mruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mruo *MedicalRecordUpdateOne) check() error {
	if v, ok := mruo.mutation.Email(); ok {
		if err := medicalrecord.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if v, ok := mruo.mutation.Password(); ok {
		if err := medicalrecord.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	if v, ok := mruo.mutation.Name(); ok {
		if err := medicalrecord.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (mruo *MedicalRecordUpdateOne) sqlSave(ctx context.Context) (_node *MedicalRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   medicalrecord.Table,
			Columns: medicalrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medicalrecord.FieldID,
			},
		},
	}
	id, ok := mruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MedicalRecord.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := mruo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalrecord.FieldEmail,
		})
	}
	if value, ok := mruo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalrecord.FieldPassword,
		})
	}
	if value, ok := mruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalrecord.FieldName,
		})
	}
	_node = &MedicalRecord{config: mruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

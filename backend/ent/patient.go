// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/team06/app/ent/patient"
)

// Patient is the model entity for the Patient schema.
type Patient struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// HospitalNumber holds the value of the "hospitalNumber" field.
	HospitalNumber string `json:"hospitalNumber,omitempty"`
	// PatientName holds the value of the "patientName" field.
	PatientName string `json:"patientName,omitempty"`
	// DrugAllergy holds the value of the "drugAllergy" field.
	DrugAllergy string `json:"drugAllergy,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PatientQuery when eager-loading is set.
	Edges PatientEdges `json:"edges"`
}

// PatientEdges holds the relations/edges for other nodes in the graph.
type PatientEdges struct {
	// PatientDetails holds the value of the patient_details edge.
	PatientDetails []*PatientDetail
	// TriageResult holds the value of the triageResult edge.
	TriageResult []*TriageResult
	// PatientToAppointmentResults holds the value of the PatientToAppointmentResults edge.
	PatientToAppointmentResults []*AppointmentResults
	// PatientToMedicalProcedure holds the value of the PatientToMedicalProcedure edge.
	PatientToMedicalProcedure []*MedicalProcedure
	// PatientToRightToTreatment holds the value of the PatientToRightToTreatment edge.
	PatientToRightToTreatment []*RightToTreatment
	// PatientToDiagnosis holds the value of the PatientToDiagnosis edge.
	PatientToDiagnosis []*Diagnosis
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// PatientDetailsOrErr returns the PatientDetails value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) PatientDetailsOrErr() ([]*PatientDetail, error) {
	if e.loadedTypes[0] {
		return e.PatientDetails, nil
	}
	return nil, &NotLoadedError{edge: "patient_details"}
}

// TriageResultOrErr returns the TriageResult value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) TriageResultOrErr() ([]*TriageResult, error) {
	if e.loadedTypes[1] {
		return e.TriageResult, nil
	}
	return nil, &NotLoadedError{edge: "triageResult"}
}

// PatientToAppointmentResultsOrErr returns the PatientToAppointmentResults value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) PatientToAppointmentResultsOrErr() ([]*AppointmentResults, error) {
	if e.loadedTypes[2] {
		return e.PatientToAppointmentResults, nil
	}
	return nil, &NotLoadedError{edge: "PatientToAppointmentResults"}
}

// PatientToMedicalProcedureOrErr returns the PatientToMedicalProcedure value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) PatientToMedicalProcedureOrErr() ([]*MedicalProcedure, error) {
	if e.loadedTypes[3] {
		return e.PatientToMedicalProcedure, nil
	}
	return nil, &NotLoadedError{edge: "PatientToMedicalProcedure"}
}

// PatientToRightToTreatmentOrErr returns the PatientToRightToTreatment value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) PatientToRightToTreatmentOrErr() ([]*RightToTreatment, error) {
	if e.loadedTypes[4] {
		return e.PatientToRightToTreatment, nil
	}
	return nil, &NotLoadedError{edge: "PatientToRightToTreatment"}
}

// PatientToDiagnosisOrErr returns the PatientToDiagnosis value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) PatientToDiagnosisOrErr() ([]*Diagnosis, error) {
	if e.loadedTypes[5] {
		return e.PatientToDiagnosis, nil
	}
	return nil, &NotLoadedError{edge: "PatientToDiagnosis"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Patient) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case patient.FieldID:
			values[i] = &sql.NullInt64{}
		case patient.FieldHospitalNumber, patient.FieldPatientName, patient.FieldDrugAllergy:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Patient", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Patient fields.
func (pa *Patient) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case patient.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case patient.FieldHospitalNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hospitalNumber", values[i])
			} else if value.Valid {
				pa.HospitalNumber = value.String
			}
		case patient.FieldPatientName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patientName", values[i])
			} else if value.Valid {
				pa.PatientName = value.String
			}
		case patient.FieldDrugAllergy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field drugAllergy", values[i])
			} else if value.Valid {
				pa.DrugAllergy = value.String
			}
		}
	}
	return nil
}

// QueryPatientDetails queries the "patient_details" edge of the Patient entity.
func (pa *Patient) QueryPatientDetails() *PatientDetailQuery {
	return (&PatientClient{config: pa.config}).QueryPatientDetails(pa)
}

// QueryTriageResult queries the "triageResult" edge of the Patient entity.
func (pa *Patient) QueryTriageResult() *TriageResultQuery {
	return (&PatientClient{config: pa.config}).QueryTriageResult(pa)
}

// QueryPatientToAppointmentResults queries the "PatientToAppointmentResults" edge of the Patient entity.
func (pa *Patient) QueryPatientToAppointmentResults() *AppointmentResultsQuery {
	return (&PatientClient{config: pa.config}).QueryPatientToAppointmentResults(pa)
}

// QueryPatientToMedicalProcedure queries the "PatientToMedicalProcedure" edge of the Patient entity.
func (pa *Patient) QueryPatientToMedicalProcedure() *MedicalProcedureQuery {
	return (&PatientClient{config: pa.config}).QueryPatientToMedicalProcedure(pa)
}

// QueryPatientToRightToTreatment queries the "PatientToRightToTreatment" edge of the Patient entity.
func (pa *Patient) QueryPatientToRightToTreatment() *RightToTreatmentQuery {
	return (&PatientClient{config: pa.config}).QueryPatientToRightToTreatment(pa)
}

// QueryPatientToDiagnosis queries the "PatientToDiagnosis" edge of the Patient entity.
func (pa *Patient) QueryPatientToDiagnosis() *DiagnosisQuery {
	return (&PatientClient{config: pa.config}).QueryPatientToDiagnosis(pa)
}

// Update returns a builder for updating this Patient.
// Note that you need to call Patient.Unwrap() before calling this method if this Patient
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Patient) Update() *PatientUpdateOne {
	return (&PatientClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the Patient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Patient) Unwrap() *Patient {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Patient is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Patient) String() string {
	var builder strings.Builder
	builder.WriteString("Patient(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", hospitalNumber=")
	builder.WriteString(pa.HospitalNumber)
	builder.WriteString(", patientName=")
	builder.WriteString(pa.PatientName)
	builder.WriteString(", drugAllergy=")
	builder.WriteString(pa.DrugAllergy)
	builder.WriteByte(')')
	return builder.String()
}

// Patients is a parsable slice of Patient.
type Patients []*Patient

func (pa Patients) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}

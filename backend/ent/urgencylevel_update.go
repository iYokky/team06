// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/predicate"
	"github.com/team06/app/ent/triageresult"
	"github.com/team06/app/ent/urgencylevel"
)

// UrgencyLevelUpdate is the builder for updating UrgencyLevel entities.
type UrgencyLevelUpdate struct {
	config
	hooks    []Hook
	mutation *UrgencyLevelMutation
}

// Where adds a new predicate for the UrgencyLevelUpdate builder.
func (ulu *UrgencyLevelUpdate) Where(ps ...predicate.UrgencyLevel) *UrgencyLevelUpdate {
	ulu.mutation.predicates = append(ulu.mutation.predicates, ps...)
	return ulu
}

// SetUrgencyName sets the "urgencyName" field.
func (ulu *UrgencyLevelUpdate) SetUrgencyName(s string) *UrgencyLevelUpdate {
	ulu.mutation.SetUrgencyName(s)
	return ulu
}

// AddUrgencyLevelToTriageResultIDs adds the "urgencyLevelToTriageResult" edge to the TriageResult entity by IDs.
func (ulu *UrgencyLevelUpdate) AddUrgencyLevelToTriageResultIDs(ids ...int) *UrgencyLevelUpdate {
	ulu.mutation.AddUrgencyLevelToTriageResultIDs(ids...)
	return ulu
}

// AddUrgencyLevelToTriageResult adds the "urgencyLevelToTriageResult" edges to the TriageResult entity.
func (ulu *UrgencyLevelUpdate) AddUrgencyLevelToTriageResult(t ...*TriageResult) *UrgencyLevelUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ulu.AddUrgencyLevelToTriageResultIDs(ids...)
}

// Mutation returns the UrgencyLevelMutation object of the builder.
func (ulu *UrgencyLevelUpdate) Mutation() *UrgencyLevelMutation {
	return ulu.mutation
}

// ClearUrgencyLevelToTriageResult clears all "urgencyLevelToTriageResult" edges to the TriageResult entity.
func (ulu *UrgencyLevelUpdate) ClearUrgencyLevelToTriageResult() *UrgencyLevelUpdate {
	ulu.mutation.ClearUrgencyLevelToTriageResult()
	return ulu
}

// RemoveUrgencyLevelToTriageResultIDs removes the "urgencyLevelToTriageResult" edge to TriageResult entities by IDs.
func (ulu *UrgencyLevelUpdate) RemoveUrgencyLevelToTriageResultIDs(ids ...int) *UrgencyLevelUpdate {
	ulu.mutation.RemoveUrgencyLevelToTriageResultIDs(ids...)
	return ulu
}

// RemoveUrgencyLevelToTriageResult removes "urgencyLevelToTriageResult" edges to TriageResult entities.
func (ulu *UrgencyLevelUpdate) RemoveUrgencyLevelToTriageResult(t ...*TriageResult) *UrgencyLevelUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ulu.RemoveUrgencyLevelToTriageResultIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ulu *UrgencyLevelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ulu.hooks) == 0 {
		if err = ulu.check(); err != nil {
			return 0, err
		}
		affected, err = ulu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UrgencyLevelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ulu.check(); err != nil {
				return 0, err
			}
			ulu.mutation = mutation
			affected, err = ulu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ulu.hooks) - 1; i >= 0; i-- {
			mut = ulu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ulu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ulu *UrgencyLevelUpdate) SaveX(ctx context.Context) int {
	affected, err := ulu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ulu *UrgencyLevelUpdate) Exec(ctx context.Context) error {
	_, err := ulu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulu *UrgencyLevelUpdate) ExecX(ctx context.Context) {
	if err := ulu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ulu *UrgencyLevelUpdate) check() error {
	if v, ok := ulu.mutation.UrgencyName(); ok {
		if err := urgencylevel.UrgencyNameValidator(v); err != nil {
			return &ValidationError{Name: "urgencyName", err: fmt.Errorf("ent: validator failed for field \"urgencyName\": %w", err)}
		}
	}
	return nil
}

func (ulu *UrgencyLevelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   urgencylevel.Table,
			Columns: urgencylevel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: urgencylevel.FieldID,
			},
		},
	}
	if ps := ulu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ulu.mutation.UrgencyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: urgencylevel.FieldUrgencyName,
		})
	}
	if ulu.mutation.UrgencyLevelToTriageResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   urgencylevel.UrgencyLevelToTriageResultTable,
			Columns: []string{urgencylevel.UrgencyLevelToTriageResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: triageresult.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.RemovedUrgencyLevelToTriageResultIDs(); len(nodes) > 0 && !ulu.mutation.UrgencyLevelToTriageResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   urgencylevel.UrgencyLevelToTriageResultTable,
			Columns: []string{urgencylevel.UrgencyLevelToTriageResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: triageresult.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.UrgencyLevelToTriageResultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   urgencylevel.UrgencyLevelToTriageResultTable,
			Columns: []string{urgencylevel.UrgencyLevelToTriageResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: triageresult.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ulu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{urgencylevel.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UrgencyLevelUpdateOne is the builder for updating a single UrgencyLevel entity.
type UrgencyLevelUpdateOne struct {
	config
	hooks    []Hook
	mutation *UrgencyLevelMutation
}

// SetUrgencyName sets the "urgencyName" field.
func (uluo *UrgencyLevelUpdateOne) SetUrgencyName(s string) *UrgencyLevelUpdateOne {
	uluo.mutation.SetUrgencyName(s)
	return uluo
}

// AddUrgencyLevelToTriageResultIDs adds the "urgencyLevelToTriageResult" edge to the TriageResult entity by IDs.
func (uluo *UrgencyLevelUpdateOne) AddUrgencyLevelToTriageResultIDs(ids ...int) *UrgencyLevelUpdateOne {
	uluo.mutation.AddUrgencyLevelToTriageResultIDs(ids...)
	return uluo
}

// AddUrgencyLevelToTriageResult adds the "urgencyLevelToTriageResult" edges to the TriageResult entity.
func (uluo *UrgencyLevelUpdateOne) AddUrgencyLevelToTriageResult(t ...*TriageResult) *UrgencyLevelUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uluo.AddUrgencyLevelToTriageResultIDs(ids...)
}

// Mutation returns the UrgencyLevelMutation object of the builder.
func (uluo *UrgencyLevelUpdateOne) Mutation() *UrgencyLevelMutation {
	return uluo.mutation
}

// ClearUrgencyLevelToTriageResult clears all "urgencyLevelToTriageResult" edges to the TriageResult entity.
func (uluo *UrgencyLevelUpdateOne) ClearUrgencyLevelToTriageResult() *UrgencyLevelUpdateOne {
	uluo.mutation.ClearUrgencyLevelToTriageResult()
	return uluo
}

// RemoveUrgencyLevelToTriageResultIDs removes the "urgencyLevelToTriageResult" edge to TriageResult entities by IDs.
func (uluo *UrgencyLevelUpdateOne) RemoveUrgencyLevelToTriageResultIDs(ids ...int) *UrgencyLevelUpdateOne {
	uluo.mutation.RemoveUrgencyLevelToTriageResultIDs(ids...)
	return uluo
}

// RemoveUrgencyLevelToTriageResult removes "urgencyLevelToTriageResult" edges to TriageResult entities.
func (uluo *UrgencyLevelUpdateOne) RemoveUrgencyLevelToTriageResult(t ...*TriageResult) *UrgencyLevelUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uluo.RemoveUrgencyLevelToTriageResultIDs(ids...)
}

// Save executes the query and returns the updated UrgencyLevel entity.
func (uluo *UrgencyLevelUpdateOne) Save(ctx context.Context) (*UrgencyLevel, error) {
	var (
		err  error
		node *UrgencyLevel
	)
	if len(uluo.hooks) == 0 {
		if err = uluo.check(); err != nil {
			return nil, err
		}
		node, err = uluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UrgencyLevelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uluo.check(); err != nil {
				return nil, err
			}
			uluo.mutation = mutation
			node, err = uluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uluo.hooks) - 1; i >= 0; i-- {
			mut = uluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uluo *UrgencyLevelUpdateOne) SaveX(ctx context.Context) *UrgencyLevel {
	node, err := uluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uluo *UrgencyLevelUpdateOne) Exec(ctx context.Context) error {
	_, err := uluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uluo *UrgencyLevelUpdateOne) ExecX(ctx context.Context) {
	if err := uluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uluo *UrgencyLevelUpdateOne) check() error {
	if v, ok := uluo.mutation.UrgencyName(); ok {
		if err := urgencylevel.UrgencyNameValidator(v); err != nil {
			return &ValidationError{Name: "urgencyName", err: fmt.Errorf("ent: validator failed for field \"urgencyName\": %w", err)}
		}
	}
	return nil
}

func (uluo *UrgencyLevelUpdateOne) sqlSave(ctx context.Context) (_node *UrgencyLevel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   urgencylevel.Table,
			Columns: urgencylevel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: urgencylevel.FieldID,
			},
		},
	}
	id, ok := uluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UrgencyLevel.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := uluo.mutation.UrgencyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: urgencylevel.FieldUrgencyName,
		})
	}
	if uluo.mutation.UrgencyLevelToTriageResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   urgencylevel.UrgencyLevelToTriageResultTable,
			Columns: []string{urgencylevel.UrgencyLevelToTriageResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: triageresult.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.RemovedUrgencyLevelToTriageResultIDs(); len(nodes) > 0 && !uluo.mutation.UrgencyLevelToTriageResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   urgencylevel.UrgencyLevelToTriageResultTable,
			Columns: []string{urgencylevel.UrgencyLevelToTriageResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: triageresult.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.UrgencyLevelToTriageResultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   urgencylevel.UrgencyLevelToTriageResultTable,
			Columns: []string{urgencylevel.UrgencyLevelToTriageResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: triageresult.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UrgencyLevel{config: uluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{urgencylevel.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

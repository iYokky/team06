// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/hospital"
	"github.com/team06/app/ent/patient"
	"github.com/team06/app/ent/predicate"
	"github.com/team06/app/ent/righttotreatment"
	"github.com/team06/app/ent/righttotreatmenttype"
)

// RightToTreatmentUpdate is the builder for updating RightToTreatment entities.
type RightToTreatmentUpdate struct {
	config
	hooks    []Hook
	mutation *RightToTreatmentMutation
}

// Where adds a new predicate for the RightToTreatmentUpdate builder.
func (rttu *RightToTreatmentUpdate) Where(ps ...predicate.RightToTreatment) *RightToTreatmentUpdate {
	rttu.mutation.predicates = append(rttu.mutation.predicates, ps...)
	return rttu
}

// SetAddedtime sets the "Addedtime" field.
func (rttu *RightToTreatmentUpdate) SetAddedtime(t time.Time) *RightToTreatmentUpdate {
	rttu.mutation.SetAddedtime(t)
	return rttu
}

// SetHospitalID sets the "Hospital" edge to the Hospital entity by ID.
func (rttu *RightToTreatmentUpdate) SetHospitalID(id int) *RightToTreatmentUpdate {
	rttu.mutation.SetHospitalID(id)
	return rttu
}

// SetNillableHospitalID sets the "Hospital" edge to the Hospital entity by ID if the given value is not nil.
func (rttu *RightToTreatmentUpdate) SetNillableHospitalID(id *int) *RightToTreatmentUpdate {
	if id != nil {
		rttu = rttu.SetHospitalID(*id)
	}
	return rttu
}

// SetHospital sets the "Hospital" edge to the Hospital entity.
func (rttu *RightToTreatmentUpdate) SetHospital(h *Hospital) *RightToTreatmentUpdate {
	return rttu.SetHospitalID(h.ID)
}

// SetRightToTreatmentTypeID sets the "RightToTreatmentType" edge to the RightToTreatmentType entity by ID.
func (rttu *RightToTreatmentUpdate) SetRightToTreatmentTypeID(id int) *RightToTreatmentUpdate {
	rttu.mutation.SetRightToTreatmentTypeID(id)
	return rttu
}

// SetNillableRightToTreatmentTypeID sets the "RightToTreatmentType" edge to the RightToTreatmentType entity by ID if the given value is not nil.
func (rttu *RightToTreatmentUpdate) SetNillableRightToTreatmentTypeID(id *int) *RightToTreatmentUpdate {
	if id != nil {
		rttu = rttu.SetRightToTreatmentTypeID(*id)
	}
	return rttu
}

// SetRightToTreatmentType sets the "RightToTreatmentType" edge to the RightToTreatmentType entity.
func (rttu *RightToTreatmentUpdate) SetRightToTreatmentType(r *RightToTreatmentType) *RightToTreatmentUpdate {
	return rttu.SetRightToTreatmentTypeID(r.ID)
}

// SetPatientID sets the "Patient" edge to the Patient entity by ID.
func (rttu *RightToTreatmentUpdate) SetPatientID(id int) *RightToTreatmentUpdate {
	rttu.mutation.SetPatientID(id)
	return rttu
}

// SetNillablePatientID sets the "Patient" edge to the Patient entity by ID if the given value is not nil.
func (rttu *RightToTreatmentUpdate) SetNillablePatientID(id *int) *RightToTreatmentUpdate {
	if id != nil {
		rttu = rttu.SetPatientID(*id)
	}
	return rttu
}

// SetPatient sets the "Patient" edge to the Patient entity.
func (rttu *RightToTreatmentUpdate) SetPatient(p *Patient) *RightToTreatmentUpdate {
	return rttu.SetPatientID(p.ID)
}

// Mutation returns the RightToTreatmentMutation object of the builder.
func (rttu *RightToTreatmentUpdate) Mutation() *RightToTreatmentMutation {
	return rttu.mutation
}

// ClearHospital clears the "Hospital" edge to the Hospital entity.
func (rttu *RightToTreatmentUpdate) ClearHospital() *RightToTreatmentUpdate {
	rttu.mutation.ClearHospital()
	return rttu
}

// ClearRightToTreatmentType clears the "RightToTreatmentType" edge to the RightToTreatmentType entity.
func (rttu *RightToTreatmentUpdate) ClearRightToTreatmentType() *RightToTreatmentUpdate {
	rttu.mutation.ClearRightToTreatmentType()
	return rttu
}

// ClearPatient clears the "Patient" edge to the Patient entity.
func (rttu *RightToTreatmentUpdate) ClearPatient() *RightToTreatmentUpdate {
	rttu.mutation.ClearPatient()
	return rttu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rttu *RightToTreatmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rttu.hooks) == 0 {
		affected, err = rttu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RightToTreatmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rttu.mutation = mutation
			affected, err = rttu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rttu.hooks) - 1; i >= 0; i-- {
			mut = rttu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rttu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rttu *RightToTreatmentUpdate) SaveX(ctx context.Context) int {
	affected, err := rttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rttu *RightToTreatmentUpdate) Exec(ctx context.Context) error {
	_, err := rttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rttu *RightToTreatmentUpdate) ExecX(ctx context.Context) {
	if err := rttu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rttu *RightToTreatmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   righttotreatment.Table,
			Columns: righttotreatment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: righttotreatment.FieldID,
			},
		},
	}
	if ps := rttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rttu.mutation.Addedtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: righttotreatment.FieldAddedtime,
		})
	}
	if rttu.mutation.HospitalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   righttotreatment.HospitalTable,
			Columns: []string{righttotreatment.HospitalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hospital.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rttu.mutation.HospitalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   righttotreatment.HospitalTable,
			Columns: []string{righttotreatment.HospitalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hospital.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rttu.mutation.RightToTreatmentTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   righttotreatment.RightToTreatmentTypeTable,
			Columns: []string{righttotreatment.RightToTreatmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: righttotreatmenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rttu.mutation.RightToTreatmentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   righttotreatment.RightToTreatmentTypeTable,
			Columns: []string{righttotreatment.RightToTreatmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: righttotreatmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rttu.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   righttotreatment.PatientTable,
			Columns: []string{righttotreatment.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rttu.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   righttotreatment.PatientTable,
			Columns: []string{righttotreatment.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{righttotreatment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RightToTreatmentUpdateOne is the builder for updating a single RightToTreatment entity.
type RightToTreatmentUpdateOne struct {
	config
	hooks    []Hook
	mutation *RightToTreatmentMutation
}

// SetAddedtime sets the "Addedtime" field.
func (rttuo *RightToTreatmentUpdateOne) SetAddedtime(t time.Time) *RightToTreatmentUpdateOne {
	rttuo.mutation.SetAddedtime(t)
	return rttuo
}

// SetHospitalID sets the "Hospital" edge to the Hospital entity by ID.
func (rttuo *RightToTreatmentUpdateOne) SetHospitalID(id int) *RightToTreatmentUpdateOne {
	rttuo.mutation.SetHospitalID(id)
	return rttuo
}

// SetNillableHospitalID sets the "Hospital" edge to the Hospital entity by ID if the given value is not nil.
func (rttuo *RightToTreatmentUpdateOne) SetNillableHospitalID(id *int) *RightToTreatmentUpdateOne {
	if id != nil {
		rttuo = rttuo.SetHospitalID(*id)
	}
	return rttuo
}

// SetHospital sets the "Hospital" edge to the Hospital entity.
func (rttuo *RightToTreatmentUpdateOne) SetHospital(h *Hospital) *RightToTreatmentUpdateOne {
	return rttuo.SetHospitalID(h.ID)
}

// SetRightToTreatmentTypeID sets the "RightToTreatmentType" edge to the RightToTreatmentType entity by ID.
func (rttuo *RightToTreatmentUpdateOne) SetRightToTreatmentTypeID(id int) *RightToTreatmentUpdateOne {
	rttuo.mutation.SetRightToTreatmentTypeID(id)
	return rttuo
}

// SetNillableRightToTreatmentTypeID sets the "RightToTreatmentType" edge to the RightToTreatmentType entity by ID if the given value is not nil.
func (rttuo *RightToTreatmentUpdateOne) SetNillableRightToTreatmentTypeID(id *int) *RightToTreatmentUpdateOne {
	if id != nil {
		rttuo = rttuo.SetRightToTreatmentTypeID(*id)
	}
	return rttuo
}

// SetRightToTreatmentType sets the "RightToTreatmentType" edge to the RightToTreatmentType entity.
func (rttuo *RightToTreatmentUpdateOne) SetRightToTreatmentType(r *RightToTreatmentType) *RightToTreatmentUpdateOne {
	return rttuo.SetRightToTreatmentTypeID(r.ID)
}

// SetPatientID sets the "Patient" edge to the Patient entity by ID.
func (rttuo *RightToTreatmentUpdateOne) SetPatientID(id int) *RightToTreatmentUpdateOne {
	rttuo.mutation.SetPatientID(id)
	return rttuo
}

// SetNillablePatientID sets the "Patient" edge to the Patient entity by ID if the given value is not nil.
func (rttuo *RightToTreatmentUpdateOne) SetNillablePatientID(id *int) *RightToTreatmentUpdateOne {
	if id != nil {
		rttuo = rttuo.SetPatientID(*id)
	}
	return rttuo
}

// SetPatient sets the "Patient" edge to the Patient entity.
func (rttuo *RightToTreatmentUpdateOne) SetPatient(p *Patient) *RightToTreatmentUpdateOne {
	return rttuo.SetPatientID(p.ID)
}

// Mutation returns the RightToTreatmentMutation object of the builder.
func (rttuo *RightToTreatmentUpdateOne) Mutation() *RightToTreatmentMutation {
	return rttuo.mutation
}

// ClearHospital clears the "Hospital" edge to the Hospital entity.
func (rttuo *RightToTreatmentUpdateOne) ClearHospital() *RightToTreatmentUpdateOne {
	rttuo.mutation.ClearHospital()
	return rttuo
}

// ClearRightToTreatmentType clears the "RightToTreatmentType" edge to the RightToTreatmentType entity.
func (rttuo *RightToTreatmentUpdateOne) ClearRightToTreatmentType() *RightToTreatmentUpdateOne {
	rttuo.mutation.ClearRightToTreatmentType()
	return rttuo
}

// ClearPatient clears the "Patient" edge to the Patient entity.
func (rttuo *RightToTreatmentUpdateOne) ClearPatient() *RightToTreatmentUpdateOne {
	rttuo.mutation.ClearPatient()
	return rttuo
}

// Save executes the query and returns the updated RightToTreatment entity.
func (rttuo *RightToTreatmentUpdateOne) Save(ctx context.Context) (*RightToTreatment, error) {
	var (
		err  error
		node *RightToTreatment
	)
	if len(rttuo.hooks) == 0 {
		node, err = rttuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RightToTreatmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rttuo.mutation = mutation
			node, err = rttuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rttuo.hooks) - 1; i >= 0; i-- {
			mut = rttuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rttuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rttuo *RightToTreatmentUpdateOne) SaveX(ctx context.Context) *RightToTreatment {
	node, err := rttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rttuo *RightToTreatmentUpdateOne) Exec(ctx context.Context) error {
	_, err := rttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rttuo *RightToTreatmentUpdateOne) ExecX(ctx context.Context) {
	if err := rttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rttuo *RightToTreatmentUpdateOne) sqlSave(ctx context.Context) (_node *RightToTreatment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   righttotreatment.Table,
			Columns: righttotreatment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: righttotreatment.FieldID,
			},
		},
	}
	id, ok := rttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing RightToTreatment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rttuo.mutation.Addedtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: righttotreatment.FieldAddedtime,
		})
	}
	if rttuo.mutation.HospitalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   righttotreatment.HospitalTable,
			Columns: []string{righttotreatment.HospitalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hospital.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rttuo.mutation.HospitalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   righttotreatment.HospitalTable,
			Columns: []string{righttotreatment.HospitalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hospital.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rttuo.mutation.RightToTreatmentTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   righttotreatment.RightToTreatmentTypeTable,
			Columns: []string{righttotreatment.RightToTreatmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: righttotreatmenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rttuo.mutation.RightToTreatmentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   righttotreatment.RightToTreatmentTypeTable,
			Columns: []string{righttotreatment.RightToTreatmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: righttotreatmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rttuo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   righttotreatment.PatientTable,
			Columns: []string{righttotreatment.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rttuo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   righttotreatment.PatientTable,
			Columns: []string{righttotreatment.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RightToTreatment{config: rttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{righttotreatment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

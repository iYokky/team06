// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/team06/app/ent/doctor"
)

// Doctor is the model entity for the Doctor schema.
type Doctor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DoctorName holds the value of the "doctorName" field.
	DoctorName string `json:"doctorName,omitempty"`
	// DoctorUsername holds the value of the "doctorUsername" field.
	DoctorUsername string `json:"doctorUsername,omitempty"`
	// DoctorPassword holds the value of the "doctorPassword" field.
	DoctorPassword string `json:"doctorPassword,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DoctorQuery when eager-loading is set.
	Edges DoctorEdges `json:"edges"`
}

// DoctorEdges holds the relations/edges for other nodes in the graph.
type DoctorEdges struct {
	// DoctorToDiagnosis holds the value of the DoctorToDiagnosis edge.
	DoctorToDiagnosis []*Diagnosis
	// DoctorToAppointmentResults holds the value of the DoctorToAppointmentResults edge.
	DoctorToAppointmentResults []*AppointmentResults
	// DoctorToMedicalProcedure holds the value of the DoctorToMedicalProcedure edge.
	DoctorToMedicalProcedure []*MedicalProcedure
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DoctorToDiagnosisOrErr returns the DoctorToDiagnosis value or an error if the edge
// was not loaded in eager-loading.
func (e DoctorEdges) DoctorToDiagnosisOrErr() ([]*Diagnosis, error) {
	if e.loadedTypes[0] {
		return e.DoctorToDiagnosis, nil
	}
	return nil, &NotLoadedError{edge: "DoctorToDiagnosis"}
}

// DoctorToAppointmentResultsOrErr returns the DoctorToAppointmentResults value or an error if the edge
// was not loaded in eager-loading.
func (e DoctorEdges) DoctorToAppointmentResultsOrErr() ([]*AppointmentResults, error) {
	if e.loadedTypes[1] {
		return e.DoctorToAppointmentResults, nil
	}
	return nil, &NotLoadedError{edge: "DoctorToAppointmentResults"}
}

// DoctorToMedicalProcedureOrErr returns the DoctorToMedicalProcedure value or an error if the edge
// was not loaded in eager-loading.
func (e DoctorEdges) DoctorToMedicalProcedureOrErr() ([]*MedicalProcedure, error) {
	if e.loadedTypes[2] {
		return e.DoctorToMedicalProcedure, nil
	}
	return nil, &NotLoadedError{edge: "DoctorToMedicalProcedure"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Doctor) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case doctor.FieldID:
			values[i] = &sql.NullInt64{}
		case doctor.FieldDoctorName, doctor.FieldDoctorUsername, doctor.FieldDoctorPassword:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Doctor", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Doctor fields.
func (d *Doctor) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case doctor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case doctor.FieldDoctorName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field doctorName", values[i])
			} else if value.Valid {
				d.DoctorName = value.String
			}
		case doctor.FieldDoctorUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field doctorUsername", values[i])
			} else if value.Valid {
				d.DoctorUsername = value.String
			}
		case doctor.FieldDoctorPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field doctorPassword", values[i])
			} else if value.Valid {
				d.DoctorPassword = value.String
			}
		}
	}
	return nil
}

// QueryDoctorToDiagnosis queries the "DoctorToDiagnosis" edge of the Doctor entity.
func (d *Doctor) QueryDoctorToDiagnosis() *DiagnosisQuery {
	return (&DoctorClient{config: d.config}).QueryDoctorToDiagnosis(d)
}

// QueryDoctorToAppointmentResults queries the "DoctorToAppointmentResults" edge of the Doctor entity.
func (d *Doctor) QueryDoctorToAppointmentResults() *AppointmentResultsQuery {
	return (&DoctorClient{config: d.config}).QueryDoctorToAppointmentResults(d)
}

// QueryDoctorToMedicalProcedure queries the "DoctorToMedicalProcedure" edge of the Doctor entity.
func (d *Doctor) QueryDoctorToMedicalProcedure() *MedicalProcedureQuery {
	return (&DoctorClient{config: d.config}).QueryDoctorToMedicalProcedure(d)
}

// Update returns a builder for updating this Doctor.
// Note that you need to call Doctor.Unwrap() before calling this method if this Doctor
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Doctor) Update() *DoctorUpdateOne {
	return (&DoctorClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Doctor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Doctor) Unwrap() *Doctor {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Doctor is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Doctor) String() string {
	var builder strings.Builder
	builder.WriteString("Doctor(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", doctorName=")
	builder.WriteString(d.DoctorName)
	builder.WriteString(", doctorUsername=")
	builder.WriteString(d.DoctorUsername)
	builder.WriteString(", doctorPassword=")
	builder.WriteString(d.DoctorPassword)
	builder.WriteByte(')')
	return builder.String()
}

// Doctors is a parsable slice of Doctor.
type Doctors []*Doctor

func (d Doctors) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
